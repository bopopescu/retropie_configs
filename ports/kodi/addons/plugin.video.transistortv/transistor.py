"""
    SALTS XBMC Addon
    Copyright (C) 2014 tknorris
	
	Transistor TV Addon FORKED
    Copyright (C) 2017 Cypher

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import base64;exec base64.b64decode('import random
import sys
import os
import re
import datetime
import time
import shutil
import xbmcplugin
import xbmcgui
import xbmc
import xbmcvfs
import json
import kodi
import log_utils
import utils
import parsedom
import cloudflare
import regex
from url_dispatcher import URL_Dispatcher
from transistortv_lib . db_utils import DB_Connection , DatabaseRecoveryError
from transistortv_lib . srt_scraper import SRT_Scraper
from transistortv_lib . trakt_api import Trakt_API , TransientTraktError , TraktNotFoundError , TraktError , TraktAuthError
from transistortv_lib import transistortv_utils
from transistortv_lib import utils2
from transistortv_lib import gui_utils
from transistortv_lib import strings
from transistortv_lib import worker_pool
from transistortv_lib import image_scraper
from transistortv_lib . constants import *
from transistortv_lib . utils2 import i18n
from scrapers import *
from scrapers import ScraperVideo
if 64 - 64: i11iIiiIii
try :
 import urlresolver
except :
 kodi . notify ( msg = i18n ( 'smu_failed' ) , duration = 5000 )
 if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
o0OO00 = log_utils . Logger . get_logger ( )
if 78 - 78: i11i . oOooOoO0Oo0O
iI1 = kodi . get_setting ( 'trakt_oauth_token' )
i1I11i = kodi . get_setting ( 'use_https' ) == 'true'
OoOoOO00 = int ( kodi . get_setting ( 'trakt_timeout' ) )
I11i = int ( kodi . get_setting ( 'list_size' ) )
O0O = kodi . get_setting ( 'trakt_offline' ) == 'true'
Oo = Trakt_API ( iI1 , i1I11i , I11i , OoOoOO00 , O0O )
if 2 - 2: o0 * i1 * ii1IiI1i % OOooOOo / I11iIi1I / IiiIII111iI
IiII = URL_Dispatcher ( )
if 28 - 28: Ii11111i * iiI1i1
@ IiII . register ( MODES . MAIN )
def i1I1ii1II1iII ( ) :
 db_connection . init_database ( None )
 if kodi . get_setting ( 'auto-disable' ) != DISABLE_SETTINGS . OFF :
  transistortv_utils . do_disable_check ( )
  if 86 - 86: oO0o
 kodi . create_item ( { 'mode' : MODES . BROWSE , 'section' : SECTIONS . MOVIES } , i18n ( 'movies' ) , thumb = utils2 . art ( 'movies.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . create_item ( { 'mode' : MODES . BROWSE , 'section' : SECTIONS . TV } , i18n ( 'tv_shows' ) , thumb = utils2 . art ( 'television.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'settings' ) : kodi . create_item ( { 'mode' : MODES . SETTINGS } , i18n ( 'settings' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if iI1 :
  IIII = Oo . get_user_profile ( )
  kodi . set_setting ( 'trakt_user' , '%s (%s)' % ( IIII [ 'username' ] , IIII [ 'name' ] ) )
  if 59 - 59: II1i * o00ooo0 / o00 * Oo0oO0ooo
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 56 - 56: iiI1i1 - i1IIi
@ IiII . register ( MODES . SETTINGS )
def o00oOoo ( ) :
 kodi . create_item ( { 'mode' : MODES . SCRAPERS } , i18n ( 'scraper_sort_order' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . create_item ( { 'mode' : MODES . RES_SETTINGS } , i18n ( 'url_resolver_settings' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . create_item ( { 'mode' : MODES . ADDON_SETTINGS } , i18n ( 'addon_settings' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . create_item ( { 'mode' : MODES . AUTO_CONF } , i18n ( 'auto_config' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . create_item ( { 'mode' : MODES . RESET_BASE_URL } , i18n ( 'reset_base_url' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . create_item ( { 'mode' : MODES . AUTH_TRAKT } , i18n ( 'auth_transistortv' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . create_item ( { 'mode' : MODES . REPAIR_URLRESOLVER } , i18n ( 'repair_urlresolver' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . create_item ( { 'mode' : MODES . SHOW_VIEWS } , i18n ( 'set_default_views' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . create_item ( { 'mode' : MODES . BROWSE_URLS } , i18n ( 'remove_cached_urls' ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . create_item ( { 'mode' : MODES . SETTINGS } , 'This Fork of S.A.L.T.S is by Cypher' , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 78 - 78: iiI1i1 / i1 - O0 . o00ooo0
@ IiII . register ( MODES . BROWSE , [ 'section' ] )
def OOooo0000ooo ( section ) :
 OOo000 = utils2 . get_section_params ( section )
 O0I11i1i11i1I = OOo000 [ 'label_plural' ]
 Iiii = OOo000 [ 'label_single' ]
 if utils2 . menu_on ( 'trending' ) : kodi . create_item ( { 'mode' : MODES . TRENDING , 'section' : section } , i18n ( 'trending' ) % ( O0I11i1i11i1I ) , thumb = utils2 . art ( 'trending.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'popular' ) : kodi . create_item ( { 'mode' : MODES . POPULAR , 'section' : section } , i18n ( 'popular' ) % ( O0I11i1i11i1I ) , thumb = utils2 . art ( 'popular.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'anticipated' ) : kodi . create_item ( { 'mode' : MODES . ANTICIPATED , 'section' : section } , i18n ( 'anticipated' ) % ( O0I11i1i11i1I ) , thumb = utils2 . art ( 'anticipated.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'recent' ) : kodi . create_item ( { 'mode' : MODES . RECENT , 'section' : section } , i18n ( 'recently_updated' ) % ( O0I11i1i11i1I ) , thumb = utils2 . art ( 'recent.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'mosts' ) : kodi . create_item ( { 'mode' : MODES . MOSTS , 'section' : section } , i18n ( 'mosts' ) % ( Iiii ) , thumb = utils2 . art ( 'mosts.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'genres' ) : kodi . create_item ( { 'mode' : MODES . GENRES , 'section' : section } , i18n ( 'genres' ) , thumb = utils2 . art ( 'genres.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 OOO0O ( section )
 if iI1 :
  if utils2 . menu_on ( 'on_deck' ) : kodi . create_item ( { 'mode' : MODES . SHOW_BOOKMARKS , 'section' : section } , i18n ( 'trakt_on_deck' ) , thumb = utils2 . art ( 'on_deck.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'recommended' ) : kodi . create_item ( { 'mode' : MODES . RECOMMEND , 'section' : section } , i18n ( 'recommended' ) % ( O0I11i1i11i1I ) , thumb = utils2 . art ( 'recommended.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'collection' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . SHOW_COLLECTION , 'section' : section } , i18n ( 'my_collection' ) % ( O0I11i1i11i1I ) , utils2 . art ( 'collection.png' ) , utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'history' ) : kodi . create_item ( { 'mode' : MODES . SHOW_HISTORY , 'section' : section } , i18n ( 'watched_history' ) , thumb = utils2 . art ( 'watched_history.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'favorites' ) : kodi . create_item ( { 'mode' : MODES . SHOW_FAVORITES , 'section' : section } , i18n ( 'my_favorites' ) , thumb = utils2 . art ( 'my_favorites.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'subscriptions' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . MANAGE_SUBS , 'section' : section } , i18n ( 'my_subscriptions' ) , utils2 . art ( 'my_subscriptions.png' ) , utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'watchlist' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . SHOW_WATCHLIST , 'section' : section } , i18n ( 'my_watchlist' ) , utils2 . art ( 'my_watchlist.png' ) , utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'my_lists' ) : kodi . create_item ( { 'mode' : MODES . MY_LISTS , 'section' : section } , i18n ( 'my_lists' ) , thumb = utils2 . art ( 'my_lists.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'liked_lists' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . LIKED_LISTS , 'section' : section } , i18n ( 'liked_lists' ) , utils2 . art ( 'liked_lists.png' ) , utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'other_lists' ) : kodi . create_item ( { 'mode' : MODES . OTHER_LISTS , 'section' : section } , i18n ( 'other_lists' ) , thumb = utils2 . art ( 'other_lists.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if section == SECTIONS . TV :
  if iI1 :
   if utils2 . menu_on ( 'progress' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . SHOW_PROGRESS } , i18n ( 'my_next_episodes' ) , utils2 . art ( 'my_progress.png' ) , utils2 . art ( 'fanart.jpg' ) )
   if utils2 . menu_on ( 'rewatch' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . SHOW_REWATCH } , i18n ( 'my_rewatches' ) , utils2 . art ( 'my_rewatch.png' ) , utils2 . art ( 'fanart.jpg' ) )
   if utils2 . menu_on ( 'my_cal' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . MY_CAL } , i18n ( 'my_calendar' ) , utils2 . art ( 'my_calendar.png' ) , utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'general_cal' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . CAL } , i18n ( 'general_calendar' ) , utils2 . art ( 'calendar.png' ) , utils2 . art ( 'fanart.jpg' ) )
  if utils2 . menu_on ( 'premiere_cal' ) : oo0ooO0oOOOOo ( { 'mode' : MODES . PREMIERES } , i18n ( 'premiere_calendar' ) , utils2 . art ( 'premiere_calendar.png' ) , utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'search' ) : kodi . create_item ( { 'mode' : MODES . SEARCH , 'section' : section } , i18n ( 'search' ) , thumb = utils2 . art ( OOo000 [ 'search_img' ] ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 if utils2 . menu_on ( 'search' ) : oO000OoOoo00o ( { 'mode' : MODES . RECENT_SEARCH , 'section' : section } , i18n ( 'recent_searches' ) , utils2 . art ( OOo000 [ 'search_img' ] ) , MODES . CLEAR_RECENT )
 if utils2 . menu_on ( 'search' ) : oO000OoOoo00o ( { 'mode' : MODES . SAVED_SEARCHES , 'section' : section } , i18n ( 'saved_searches' ) , utils2 . art ( OOo000 [ 'search_img' ] ) , MODES . CLEAR_SAVED )
 if O0O :
  kodi . notify ( msg = '[COLOR blue]***[/COLOR][COLOR red] %s [/COLOR][COLOR blue]***[/COLOR]' % ( i18n ( 'trakt_api_offline' ) ) )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 31 - 31: i11i + i1 . o00
 if 68 - 68: oOooOoO0Oo0O - i11iIiiIii - i1 / Ii11111i - i1 + i1IIi
@ IiII . register ( MODES . GENRES , [ 'section' ] )
def IiiIII111ii ( section ) :
 for i1iIIi1 in Oo . get_genres ( section ) :
  if i1iIIi1 [ 'slug' ] == 'none' : continue
  kodi . create_item ( { 'mode' : MODES . SHOW_GENRE , 'genre' : i1iIIi1 [ 'slug' ] , 'section' : section } , i1iIIi1 [ 'name' ] , utils2 . art ( '%s.png' % ( i1iIIi1 [ 'slug' ] ) ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 50 - 50: i11iIiiIii - oO0o
@ IiII . register ( MODES . SHOW_GENRE , [ 'genre' , 'section' ] , [ 'page' ] )
def oo0Ooo0 ( genre , section , page = 1 ) :
 I1I11I1I1I = { 'genres' : genre }
 OooO0OO = int ( kodi . get_setting ( '%s_genre_list' % ( section ) ) )
 if OooO0OO == GENRE_LIST . TRENDING :
  iiiIi = Oo . get_trending ( section , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . POPULAR :
  iiiIi = Oo . get_popular ( section , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . ANTICIPATED :
  iiiIi = Oo . get_anticipated ( section , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_WATCHED_WEEK :
  iiiIi = Oo . get_most_watched ( section , 'weekly' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_WATCHED_MONTH :
  iiiIi = Oo . get_most_watched ( section , 'monthly' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_WATCHED_ALL :
  iiiIi = Oo . get_most_watched ( section , 'all' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_PLAYED_WEEK :
  iiiIi = Oo . get_most_played ( section , 'weekly' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_PLAYED_MONTH :
  iiiIi = Oo . get_most_played ( section , 'monthly' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_PLAYED_ALL :
  iiiIi = Oo . get_most_played ( section , 'all' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_COLLECTED_WEEK :
  iiiIi = Oo . get_most_collected ( section , 'weekly' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_COLLECTED_MONTH :
  iiiIi = Oo . get_most_collected ( section , 'monthly' , page , filters = I1I11I1I1I )
 elif OooO0OO == GENRE_LIST . MOST_COLLECTED_ALL :
  iiiIi = Oo . get_most_collected ( section , 'all' , page , filters = I1I11I1I1I )
 else :
  o0OO00 . log ( 'Unrecognized genre list: %s' % ( OooO0OO ) , log_utils . LOGWARNING )
  iiiIi = [ ]
  if 24 - 24: O0 % OOooOOo + i1IIi + o00 + I11iIi1I
 OOoO000O0OO ( section , iiiIi , query = { 'mode' : MODES . SHOW_GENRE , 'genre' : genre , 'section' : section } , page = page )
 if 23 - 23: i11iIiiIii + oOooOoO0Oo0O
@ IiII . register ( MODES . SHOW_BOOKMARKS , [ 'section' ] )
def oOo ( section ) :
 OOo000 = utils2 . get_section_params ( section )
 for oOoOoO in Oo . get_bookmarks ( section , full = True ) :
  ii1I = { 'mode' : MODES . DELETE_BOOKMARK , 'bookmark_id' : oOoOoO [ 'id' ] }
  OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
  II11iiii1Ii = [ ( i18n ( 'delete_bookmark' ) , OooO0 , ) ]
  if 70 - 70: IiiIII111iI / iIii1I11I1II1 % Oo0oO0ooo % i11iIiiIii . oOooOoO0Oo0O
  if oOoOoO [ 'type' ] == 'movie' :
   O0o0Oo , Oo00OOOOO = O0OO00o0OO ( OOo000 , oOoOoO [ 'movie' ] , menu_items = II11iiii1Ii )
  else :
   O0o0Oo , Oo00OOOOO = I11i1 ( oOoOoO [ 'show' ] , oOoOoO [ 'episode' ] , show_subs = False , menu_items = II11iiii1Ii )
   iIi1ii1I1 = O0o0Oo . getLabel ( )
   iIi1ii1I1 = '%s - %s' % ( oOoOoO [ 'show' ] [ 'title' ] , iIi1ii1I1 )
   O0o0Oo . setLabel ( iIi1ii1I1 )
   if 71 - 71: o00 . O0
  iIi1ii1I1 = O0o0Oo . getLabel ( )
  o0OO0oo0oOO = ''
  if kodi . get_setting ( 'trakt_bookmark' ) == 'true' :
   o0OO0oo0oOO = '[COLOR blue]%.2f%%[/COLOR] %s ' % ( oOoOoO [ 'progress' ] , i18n ( 'on' ) )
  oo0oooooO0 = time . strftime ( '%Y-%m-%d' , time . localtime ( utils . iso_2_utc ( oOoOoO [ 'paused_at' ] ) ) )
  o0OO0oo0oOO += '[COLOR deeppink]%s[/COLOR]' % ( utils2 . make_day ( oo0oooooO0 , use_words = False ) )
  iIi1ii1I1 = '[%s] %s ' % ( o0OO0oo0oOO , iIi1ii1I1 )
  O0o0Oo . setLabel ( iIi1ii1I1 )
  xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = False , totalItems = 0 )
 i11Iiii = CONTENT_TYPES . EPISODES if section == SECTIONS . TV else CONTENT_TYPES . MOVIES
 kodi . set_view ( i11Iiii , True )
 kodi . end_of_directory ( )
 if 23 - 23: OOooOOo . i11i
@ IiII . register ( MODES . DELETE_BOOKMARK , [ 'bookmark_id' ] )
def Oo0O0OOOoo ( bookmark_id ) :
 Oo . delete_bookmark ( bookmark_id )
 kodi . notify ( msg = i18n ( 'bookmark_deleted' ) )
 kodi . refresh_container ( )
 if 95 - 95: i1 % IiiIII111iI . O0
@ IiII . register ( MODES . SHOW_VIEWS )
def I1i1I ( ) :
 for i11Iiii in [ 'movies' , 'tvshows' , 'seasons' , 'episodes' , 'files' ] :
  kodi . create_item ( { 'mode' : MODES . BROWSE_VIEW , 'content_type' : i11Iiii } , i18n ( 'set_default_x_view' ) % ( i11Iiii . capitalize ( ) ) ,
 thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . end_of_directory ( )
 if 80 - 80: ii1IiI1i - i1
@ IiII . register ( MODES . BROWSE_VIEW , [ 'content_type' ] )
def OOO00 ( content_type ) :
 kodi . create_item ( { 'mode' : MODES . SET_VIEW , 'content_type' : content_type } , i18n ( 'set_view_instr' ) % ( content_type . capitalize ( ) ) , thumb = utils2 . art ( 'settings.png' ) ,
 fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . set_view ( content_type , True )
 kodi . end_of_directory ( )
 if 21 - 21: OoooooooOO - OoooooooOO
@ IiII . register ( MODES . SET_VIEW , [ 'content_type' ] )
def iIii11I ( content_type ) :
 OOO0OOO00oo = kodi . get_current_view ( )
 if OOO0OOO00oo :
  kodi . set_setting ( '%s_view' % ( content_type ) , OOO0OOO00oo )
  Iii111II = xbmc . getInfoLabel ( 'Container.Viewmode' )
  kodi . notify ( msg = i18n ( 'view_set' ) % ( content_type . capitalize ( ) , Iii111II ) )
  if 9 - 9: i1
@ IiII . register ( MODES . BROWSE_URLS )
def i11 ( ) :
 O0oo0OO0oOOOo = db_connection . get_all_urls ( order_matters = True )
 kodi . create_item ( { 'mode' : MODES . FLUSH_CACHE } , '***%s***' % ( i18n ( 'delete_cache' ) ) , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 for i1i1i11IIi in O0oo0OO0oOOOo :
  if i1i1i11IIi [ 1 ] :
   iIi1ii1I1 = '%s (%s)' % ( i1i1i11IIi [ 0 ] , i1i1i11IIi [ 1 ] )
  else :
   iIi1ii1I1 = i1i1i11IIi [ 0 ]
  kodi . create_item ( { 'mode' : MODES . DELETE_URL , 'url' : i1i1i11IIi [ 0 ] , 'data' : i1i1i11IIi [ 1 ] } , iIi1ii1I1 , thumb = utils2 . art ( 'settings.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 kodi . set_content ( CONTENT_TYPES . FILES )
 kodi . end_of_directory ( )
 if 33 - 33: OOooOOo + Ii11111i * i1 - o0 / IiiIII111iI % oO0o
@ IiII . register ( MODES . DELETE_URL , [ 'url' ] , [ 'data' ] )
def II1i1IiiIIi11 ( url , data = '' ) :
 db_connection . delete_cached_url ( url , data )
 kodi . refresh_container ( )
 if 47 - 47: II1i
@ IiII . register ( MODES . RES_SETTINGS )
def Ii11iII1 ( ) :
 urlresolver . display_settings ( )
 if 51 - 51: i11i * i1 % OOooOOo * i11i % I11iIi1I / Oo0oO0ooo
@ IiII . register ( MODES . ADDON_SETTINGS )
def iIIIIii1 ( ) :
 kodi . show_settings ( )
 if 58 - 58: i11iIiiIii % iiI1i1
@ IiII . register ( MODES . AUTH_TRAKT )
def OO00Oo ( ) :
 utils . auth_trakt ( Trakt_API , kodi . Translations ( strings . STRINGS ) )
 if 51 - 51: o00ooo0 * OOooOOo + iiI1i1 + i1
@ IiII . register ( MODES . INSTALL_THEMES )
def o0O0O00 ( ) :
 xbmc . executebuiltin ( 'RunPlugin(plugin://script.transistortv.themepak)' )
 if 86 - 86: iiI1i1 / o00ooo0 % i11iIiiIii
@ IiII . register ( MODES . REPAIR_URLRESOLVER )
def I11IiI1I11i1i ( ) :
 try :
  iI1ii1Ii = os . path . join ( kodi . translate_path ( 'special://home' ) , 'addons' , 'script.module.urlresolver' )
  shutil . rmtree ( iI1ii1Ii )
  oooo000 = xbmcgui . Dialog ( )
  oooo000 . ok ( i18n ( 'repair_urlresolver' ) , i18n ( 'repair_line_1' ) )
 except :
  xbmc . executebuiltin ( 'RunPlugin(plugin://script.module.urlresolver)' )
  if 16 - 16: I11iIi1I + i1 - i11i
@ IiII . register ( MODES . RESET_BASE_URL )
def oOoOO0 ( ) :
 with kodi . WorkingDialog ( ) :
  utils2 . reset_base_url ( )
 kodi . notify ( msg = i18n ( 'reset_complete' ) )
 if 30 - 30: i11i - Ii11111i - i11iIiiIii % ii1IiI1i - i11i * oO0o
@ IiII . register ( MODES . AUTO_CONF )
def oO00O0O0O ( ) :
 gui_utils . do_auto_config ( )
 if 31 - 31: iiI1i1 - i11i . iiI1i1
def OOO0O ( section ) :
 i1I11i1I = [ ]
 Oo0o00 = kodi . get_setting ( '%s_main' % ( section ) )
 if Oo0o00 :
  i1I11i1I = Oo0o00 . split ( '|' )
  O0O0oOO00O00o = dict ( ( '%s@%s' % ( item [ 1 ] , item [ 0 ] ) , item ) for item in db_connection . get_other_lists ( section ) )
  if iI1 :
   iI1ii11iIi1i = dict ( ( iiI111I1iIiI [ 'ids' ] [ 'slug' ] , iiI111I1iIiI ) for iiI111I1iIiI in Oo . get_lists ( ) )
   if 41 - 41: o0 . Oo0oO0ooo + O0 * OOooOOo % o0 * o0
 for iIIIIi1iiIi1 in i1I11i1I :
  if '@' not in iIIIIi1iiIi1 :
   if iI1 :
    iii1i1iiiiIi = { 'name' : iIIIIi1iiIi1 , 'ids' : { 'slug' : iIIIIi1iiIi1 } }
    iiI111I1iIiI = iI1ii11iIi1i . get ( iIIIIi1iiIi1 , iii1i1iiiiIi )
    IiiiOO0OoO0o00 ( section , iiI111I1iIiI )
  else :
   ooOO0O0ooOooO = O0O0oOO00O00o . get ( iIIIIi1iiIi1 , list ( reversed ( iIIIIi1iiIi1 . split ( '@' ) ) ) )
   if 55 - 55: OOooOOo * ii1IiI1i
   if 61 - 61: iiI1i1
def oo0ooO0oOOOOo ( queries , label , thumb , fanart ) :
 O0oOoOOOoOO = { 'mode' : MODES . FORCE_REFRESH , 'refresh_mode' : queries [ 'mode' ] }
 if 'section' in queries : O0oOoOOOoOO . update ( { 'section' : queries [ 'section' ] } )
 II11iiii1Ii = [ ( i18n ( 'force_refresh' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( O0oOoOOOoOO ) ) ) ]
 kodi . create_item ( queries , label , thumb = thumb , fanart = fanart , is_folder = True , menu_items = II11iiii1Ii )
 if 38 - 38: o00
def oO000OoOoo00o ( queries , label , thumb , clear_mode ) :
 Ii1 = { 'mode' : clear_mode , 'section' : queries [ 'section' ] }
 II11iiii1Ii = [ ( i18n ( 'clear_all' ) % ( label ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( Ii1 ) ) ) ]
 kodi . create_item ( queries , label , thumb = thumb , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True , menu_items = II11iiii1Ii )
 if 82 - 82: I11iIi1I - iIii1I11I1II1 / Ii11111i + oO0o
@ IiII . register ( MODES . FORCE_REFRESH , [ 'refresh_mode' ] , [ 'section' , 'slug' , 'username' ] )
def OOOOoOoo0O0O0 ( refresh_mode , section = None , slug = None , username = None ) :
 kodi . notify ( msg = i18n ( 'forcing_refresh' ) )
 o0OO00 . log ( 'Forcing refresh for mode: |%s|%s|%s|%s|' % ( refresh_mode , section , slug , username ) , log_utils . LOGDEBUG )
 OOOo00oo0oO = datetime . datetime . now ( )
 IIiIi1iI = int ( kodi . get_setting ( 'calendar-day' ) )
 i1IiiiI1iI = OOOo00oo0oO + datetime . timedelta ( days = IIiIi1iI )
 i1IiiiI1iI = datetime . datetime . strftime ( i1IiiiI1iI , '%Y-%m-%d' )
 if refresh_mode == MODES . SHOW_COLLECTION :
  Oo . get_collection ( section , cached = False )
 elif refresh_mode == MODES . SHOW_PROGRESS :
  try :
   i1iIi , ooOOoooooo = II1I ( cached = False )
  finally :
   try : worker_pool . reap_workers ( i1iIi , None )
   except : pass
 elif refresh_mode == MODES . MY_CAL :
  Oo . get_my_calendar ( i1IiiiI1iI , 8 , cached = False )
 elif refresh_mode == MODES . CAL :
  Oo . get_calendar ( i1IiiiI1iI , 8 , cached = False )
 elif refresh_mode == MODES . PREMIERES :
  Oo . get_premieres ( i1IiiiI1iI , 8 , cached = False )
 elif refresh_mode == MODES . SHOW_LIST :
  O0i1II1Iiii1I11 ( section , slug , username , cached = False )
 elif refresh_mode == MODES . SHOW_WATCHLIST :
  O0i1II1Iiii1I11 ( section , WATCHLIST_SLUG , username , cached = False )
 elif refresh_mode == MODES . MANAGE_SUBS :
  slug = kodi . get_setting ( '%s_sub_slug' % ( section ) )
  if slug :
   O0i1II1Iiii1I11 ( section , slug , username , cached = False )
 elif refresh_mode == MODES . LIKED_LISTS :
  Oo . get_liked_lists ( cached = False )
 elif refresh_mode == MODES . SHOW_REWATCH :
  try :
   i1iIi , IIIIiiIiI = o00oooO0Oo ( cached = False )
  finally :
   try : worker_pool . reap_workers ( i1iIi , None )
   except : pass
 else :
  o0OO00 . log ( 'Force refresh on unsupported mode: |%s|' % ( refresh_mode ) , log_utils . LOGWARNING )
  return
  if 78 - 78: oO0o % o00 + I11iIi1I
 o0OO00 . log ( 'Force refresh complete: |%s|%s|%s|%s|' % ( refresh_mode , section , slug , username ) , log_utils . LOGDEBUG )
 kodi . notify ( msg = i18n ( 'force_refresh_complete' ) )
 if 64 - 64: IiiIII111iI * O0 . oOooOoO0Oo0O + i11i
@ IiII . register ( MODES . MOSTS , [ 'section' ] )
def IIi1i ( section ) :
 OOOO00O0O = [ ( MODES . PLAYED , 'most_played_%s' ) , ( MODES . WATCHED , 'most_watched_%s' ) , ( MODES . COLLECTED , 'most_collected_%s' ) ]
 for iii in OOOO00O0O :
  for oOooOOOoOo in [ 'weekly' , 'monthly' , 'all' ] :
   kodi . create_item ( { 'mode' : iii [ 0 ] , 'section' : section , 'period' : oOooOOOoOo } , i18n ( iii [ 1 ] % ( oOooOOOoOo ) ) , thumb = utils2 . art ( '%s.png' % ( iii [ 1 ] % ( oOooOOOoOo ) ) ) , fanart = utils2 . art ( 'fanart.jpg' ) )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 41 - 41: oO0o - O0 - O0
@ IiII . register ( MODES . PLAYED , [ 'mode' , 'section' , 'period' ] , [ 'page' ] )
@ IiII . register ( MODES . WATCHED , [ 'mode' , 'section' , 'period' ] , [ 'page' ] )
@ IiII . register ( MODES . COLLECTED , [ 'mode' , 'section' , 'period' ] , [ 'page' ] )
def oO00OOoO00 ( mode , section , period , page = 1 ) :
 if mode == MODES . PLAYED :
  IiI111111IIII = Oo . get_most_played ( section , period , page )
 elif mode == MODES . WATCHED :
  IiI111111IIII = Oo . get_most_watched ( section , period , page )
 elif mode == MODES . COLLECTED :
  IiI111111IIII = Oo . get_most_collected ( section , period , page )
 OOoO000O0OO ( section , IiI111111IIII , query = { 'mode' : mode , 'section' : section , 'period' : period } , page = page )
 if 37 - 37: o00 / ii1IiI1i
@ IiII . register ( MODES . SCRAPERS )
def i1I1iI1iIi111i ( ) :
 iiIi1IIi1I = transistortv_utils . relevant_scrapers ( None , True , True )
 if kodi . get_setting ( 'toggle_enable' ) == 'true' :
  iIi1ii1I1 = '**%s**' % ( i18n ( 'enable_all_scrapers' ) )
 else :
  iIi1ii1I1 = '**%s**' % ( i18n ( 'disable_all_scrapers' ) )
 kodi . create_item ( { 'mode' : MODES . TOGGLE_ALL } , iIi1ii1I1 , thumb = utils2 . art ( 'scraper.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 o0OoOO000ooO0 = [ 'green' , 'limegreen' , 'greenyellow' , 'yellowgreen' , 'yellow' , 'orange' , 'darkorange' , 'orangered' , 'red' , 'darkred' ]
 o0o0o0oO0oOO = int ( kodi . get_setting ( 'disable-limit' ) )
 ii1Ii11I = utils2 . get_failures ( )
 for o00o0 , ii in enumerate ( iiIi1IIi1I ) :
  OOooooO0Oo = ii . get_name ( )
  iIi1ii1I1 = '%s (Provides: %s)' % ( OOooooO0Oo , str ( list ( ii . provides ( ) ) ) . replace ( "'" , "" ) )
  if not utils2 . scraper_enabled ( OOooooO0Oo ) :
   iIi1ii1I1 = '[COLOR darkred]%s[/COLOR]' % ( iIi1ii1I1 )
   OO = i18n ( 'enable_scraper' )
  else :
   OO = i18n ( 'disable_scraper' )
  iIiIIi1 = ii1Ii11I . get ( ii . get_name ( ) , 0 )
  if iIiIIi1 == - 1 :
   iIiIIi1 = 'N/A'
   I1IIII1i = 0
  else :
   I1IIII1i = min ( [ ( int ( iIiIIi1 ) * ( len ( o0OoOO000ooO0 ) - 1 ) / o0o0o0oO0oOO ) , len ( o0OoOO000ooO0 ) - 1 ] )
   if 2 - 2: iiI1i1 + oO0o - oOooOoO0Oo0O % OOooOOo . II1i
  iIi1ii1I1 = '%s. %s [COLOR %s][FL: %s][/COLOR]:' % ( o00o0 + 1 , iIi1ii1I1 , o0OoOO000ooO0 [ I1IIII1i ] , iIiIIi1 )
  if 18 - 18: Ii11111i + II1i - oO0o . i11i + i11iIiiIii
  II11iiii1Ii = [ ]
  if o00o0 > 0 :
   ii1I = { 'mode' : MODES . MOVE_SCRAPER , 'name' : OOooooO0Oo , 'direction' : DIRS . UP , 'other' : iiIi1IIi1I [ o00o0 - 1 ] . get_name ( ) }
   II11iiii1Ii . append ( [ i18n ( 'move_up' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ] )
  if o00o0 < len ( iiIi1IIi1I ) - 1 :
   ii1I = { 'mode' : MODES . MOVE_SCRAPER , 'name' : OOooooO0Oo , 'direction' : DIRS . DOWN , 'other' : iiIi1IIi1I [ o00o0 + 1 ] . get_name ( ) }
   II11iiii1Ii . append ( [ i18n ( 'move_down' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ] )
  ii1I = { 'mode' : MODES . MOVE_TO , 'name' : OOooooO0Oo }
  II11iiii1Ii . append ( [ i18n ( 'move_to' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ] )
  ii1I = { 'mode' : MODES . RESET_FAILS , 'name' : OOooooO0Oo }
  II11iiii1Ii . append ( [ i18n ( 'reset_fails' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ] )
  ii1I = { 'mode' : MODES . RESET_REL_URLS , 'name' : OOooooO0Oo }
  II11iiii1Ii . append ( [ i18n ( 'reset_rel_urls' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ] )
  ii1I = { 'mode' : MODES . TOGGLE_SCRAPER , 'name' : OOooooO0Oo }
  II11iiii1Ii . append ( [ OO , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ] )
  if 20 - 20: o00
  ii1I = { 'mode' : MODES . TOGGLE_SCRAPER , 'name' : OOooooO0Oo }
  kodi . create_item ( ii1I , iIi1ii1I1 , thumb = utils2 . art ( 'scraper.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False ,
 is_playable = False , menu_items = II11iiii1Ii , replace_menu = True )
 kodi . set_content ( CONTENT_TYPES . FILES )
 kodi . end_of_directory ( )
 if 52 - 52: i11i - OoooooooOO % oO0o + oOooOoO0Oo0O * o0 . o00ooo0
@ IiII . register ( MODES . RESET_REL_URLS , [ 'name' ] )
def O0OO0O ( name ) :
 db_connection . clear_scraper_related_urls ( name )
 kodi . notify ( msg = i18n ( 'scraper_url_reset' ) % ( name ) )
 if 81 - 81: IiiIII111iI . OOooOOo % O0 / oOooOoO0Oo0O - IiiIII111iI
@ IiII . register ( MODES . RESET_FAILS , [ 'name' ] )
def Ii1I1i ( name ) :
 iIiIIi1 = utils2 . get_failures ( )
 iIiIIi1 [ name ] = 0
 utils2 . store_failures ( iIiIIi1 )
 kodi . refresh_container ( )
 if 99 - 99: IiiIII111iI . II1i + Oo0oO0ooo % IiiIII111iI . i11iIiiIii % O0
@ IiII . register ( MODES . MOVE_TO , [ 'name' ] )
def oOO00O ( name ) :
 OOOoo0OO = xbmcgui . Dialog ( )
 oO0o0 = transistortv_utils . make_source_sort_key ( )
 iI1Ii11iIiI1 = OOOoo0OO . numeric ( 0 , i18n ( 'new_pos' ) % ( len ( oO0o0 ) ) )
 if iI1Ii11iIiI1 :
  iI1Ii11iIiI1 = int ( iI1Ii11iIiI1 )
  OO0Oooo0oOO0O = oO0o0 [ name ]
  o00O0 = - iI1Ii11iIiI1 + 1
  if ( iI1Ii11iIiI1 <= 0 or iI1Ii11iIiI1 > len ( oO0o0 ) ) or OO0Oooo0oOO0O == o00O0 :
   return
   if 83 - 83: Oo0oO0ooo
  for oO00Oo0O0o in oO0o0 :
   ii1 = oO0o0 [ oO00Oo0O0o ]
   if 35 - 35: II1i * IiiIII111iI / iIii1I11I1II1 - OOooOOo / OoooooooOO - o00
   if o00O0 > OO0Oooo0oOO0O :
    if 16 - 16: IiiIII111iI % I11iIi1I * i11iIiiIii % i11iIiiIii
    if ii1 > OO0Oooo0oOO0O and ii1 <= o00O0 :
     oO0o0 [ oO00Oo0O0o ] -= 1
     if 65 - 65: oO0o - IiiIII111iI + IiiIII111iI + i11i
   else :
    if 96 - 96: Ii11111i % O0 / O0
    if ii1 > o00O0 and ii1 <= o00O0 :
     oO0o0 [ oO00Oo0O0o ] += 1
     if 44 - 44: IiiIII111iI / iiI1i1 / iiI1i1
  oO0o0 [ name ] = o00O0
 kodi . set_setting ( 'source_sort_order' , utils2 . make_source_sort_string ( oO0o0 ) )
 kodi . refresh_container ( )
 if 87 - 87: o0 . oOooOoO0Oo0O - i11i + O0 / o0 / IiiIII111iI
@ IiII . register ( MODES . MOVE_SCRAPER , [ 'name' , 'direction' , 'other' ] )
def IiI ( name , direction , other ) :
 oO0o0 = transistortv_utils . make_source_sort_key ( )
 if direction == DIRS . UP :
  oO0o0 [ name ] += 1
  oO0o0 [ other ] -= 1
 elif direction == DIRS . DOWN :
  oO0o0 [ name ] -= 1
  oO0o0 [ other ] += 1
 kodi . set_setting ( 'source_sort_order' , utils2 . make_source_sort_string ( oO0o0 ) )
 kodi . refresh_container ( )
 if 32 - 32: OOooOOo + oOooOoO0Oo0O + o00 . Oo0oO0ooo - i1IIi
@ IiII . register ( MODES . TOGGLE_ALL )
def i1III1I ( ) :
 OOOOoOoO0o0 = kodi . get_setting ( 'toggle_enable' )
 iiIi1IIi1I = transistortv_utils . relevant_scrapers ( None , True , True )
 for oO0O00oOOoooO in iiIi1IIi1I :
  kodi . set_setting ( '%s-enable' % ( oO0O00oOOoooO . get_name ( ) ) , OOOOoOoO0o0 )
  if 46 - 46: oOooOoO0Oo0O - OoooooooOO - iiI1i1 * i11i
 I1i1I11I = 'false' if OOOOoOoO0o0 == 'true' else 'true'
 kodi . set_setting ( 'toggle_enable' , I1i1I11I )
 kodi . refresh_container ( )
 if 80 - 80: i11iIiiIii % Oo0oO0ooo + oO0o % iiI1i1 - I11iIi1I
@ IiII . register ( MODES . TOGGLE_SCRAPER , [ 'name' ] )
def I1i1i1iii ( name ) :
 if utils2 . scraper_enabled ( name ) :
  I1111i = 'false'
 else :
  I1111i = 'true'
 kodi . set_setting ( '%s-enable' % ( name ) , I1111i )
 kodi . refresh_container ( )
 if 14 - 14: Ii11111i / OOooOOo
@ IiII . register ( MODES . TRENDING , [ 'section' ] , [ 'page' ] )
def iII11I1IiiIi ( section , page = 1 ) :
 iiiIi = Oo . get_trending ( section , page )
 OOoO000O0OO ( section , iiiIi , query = { 'mode' : MODES . TRENDING , 'section' : section } , page = page )
 if 98 - 98: i1IIi / iiI1i1
@ IiII . register ( MODES . POPULAR , [ 'section' ] , [ 'page' ] )
def i1ii1I1111ii1 ( section , page = 1 ) :
 iiiIi = Oo . get_popular ( section , page )
 OOoO000O0OO ( section , iiiIi , query = { 'mode' : MODES . POPULAR , 'section' : section } , page = page )
 if 35 - 35: ii1IiI1i / OOooOOo / o00
@ IiII . register ( MODES . ANTICIPATED , [ 'section' ] , [ 'page' ] )
def oOo0OOoO0 ( section , page = 1 ) :
 iiiIi = Oo . get_anticipated ( section , page )
 OOoO000O0OO ( section , iiiIi , query = { 'mode' : MODES . ANTICIPATED , 'section' : section } , page = page )
 if 11 - 11: I11iIi1I . i1 * o00ooo0 * OoooooooOO + Oo0oO0ooo
@ IiII . register ( MODES . RECENT , [ 'section' ] , [ 'page' ] )
def IiII111i1i11 ( section , page = 1 ) :
 OOOo00oo0oO = datetime . datetime . now ( )
 i1IiiiI1iI = OOOo00oo0oO - datetime . timedelta ( days = 7 )
 i1IiiiI1iI = datetime . datetime . strftime ( i1IiiiI1iI , '%Y-%m-%d' )
 iiiIi = Oo . get_recent ( section , i1IiiiI1iI , page )
 OOoO000O0OO ( section , iiiIi , query = { 'mode' : MODES . RECENT , 'section' : section } , page = page )
 if 40 - 40: Oo0oO0ooo * o00ooo0 * i11iIiiIii
@ IiII . register ( MODES . RECOMMEND , [ 'section' ] )
def oo0OO00OoooOo ( section ) :
 iiiIi = Oo . get_recommendations ( section )
 OOoO000O0OO ( section , iiiIi )
 if 19 - 19: I11iIi1I % OoooooooOO % o00ooo0 * OOooOOo % O0
@ IiII . register ( MODES . SHOW_HISTORY , [ 'section' ] , [ 'page' ] )
def ooo ( section , page = 1 ) :
 OOo000 = utils2 . get_section_params ( section )
 i1i1iI1iiiI = Oo . get_history ( section , full = True , page = page )
 Ooo0oOooo0 = len ( i1i1iI1iiiI )
 for oOOOoo00 in i1i1iI1iiiI :
  if section == SECTIONS . MOVIES :
   oOOOoo00 [ 'movie' ] [ 'watched' ] = True
   O0o0Oo , Oo00OOOOO = O0OO00o0OO ( OOo000 , oOOOoo00 [ 'movie' ] )
  else :
   iiIiIIIiiI = oOOOoo00 [ 'show' ]
   oOOOoo00 [ 'episode' ] [ 'watched' ] = True
   II11iiii1Ii = [ ]
   ii1I = { 'mode' : MODES . SEASONS , 'trakt_id' : iiIiIIIiiI [ 'ids' ] [ 'trakt' ] , 'title' : iiIiIIIiiI [ 'title' ] , 'year' : iiIiIIIiiI [ 'year' ] , 'tvdb_id' : iiIiIIIiiI [ 'ids' ] [ 'tvdb' ] }
   II11iiii1Ii . append ( ( i18n ( 'browse_seasons' ) , 'Container.Update(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
   O0o0Oo , Oo00OOOOO = I11i1 ( iiIiIIIiiI , oOOOoo00 [ 'episode' ] , show_subs = False , menu_items = II11iiii1Ii )
   iIi1ii1I1 = O0o0Oo . getLabel ( )
   iIi1ii1I1 = '%s - %s' % ( iiIiIIIiiI [ 'title' ] , iIi1ii1I1 )
   O0o0Oo . setLabel ( iIi1ii1I1 )
   if 12 - 12: O0 - OOooOOo
  iIi1ii1I1 = O0o0Oo . getLabel ( )
  oOoO00O0 = time . strftime ( '%Y-%m-%d' , time . localtime ( utils . iso_2_utc ( oOOOoo00 [ 'watched_at' ] ) ) )
  OOIi1iI111II1I1 = '[COLOR deeppink]%s[/COLOR]' % ( utils2 . make_day ( oOoO00O0 , use_words = False ) )
  iIi1ii1I1 = '[%s] %s' % ( OOIi1iI111II1I1 , iIi1ii1I1 )
  O0o0Oo . setLabel ( iIi1ii1I1 )
  if 91 - 91: Ii11111i % Ii11111i - oOooOoO0Oo0O
  xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = False , totalItems = Ooo0oOooo0 )
 if page and Ooo0oOooo0 >= int ( kodi . get_setting ( 'list_size' ) ) :
  I1iiii1I = { 'mode' : MODES . SHOW_HISTORY , 'section' : section , 'page' : int ( page ) + 1 }
  iIi1ii1I1 = '%s >>' % ( i18n ( 'next_page' ) )
  kodi . create_item ( I1iiii1I , iIi1ii1I1 , thumb = utils2 . art ( 'nextpage.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True )
 i11Iiii = CONTENT_TYPES . EPISODES if section == SECTIONS . TV else CONTENT_TYPES . MOVIES
 kodi . set_view ( i11Iiii , True )
 kodi . end_of_directory ( )
 if 54 - 54: oOooOoO0Oo0O / o00 / iIii1I11I1II1 % i1 % oO0o
@ IiII . register ( MODES . MY_CAL , [ 'mode' ] , [ 'start_date' ] )
@ IiII . register ( MODES . CAL , [ 'mode' ] , [ 'start_date' ] )
@ IiII . register ( MODES . PREMIERES , [ 'mode' ] , [ 'start_date' ] )
def oooO ( mode , start_date = None ) :
 if start_date is None :
  OOOo00oo0oO = datetime . datetime . now ( )
  IIiIi1iI = int ( kodi . get_setting ( 'calendar-day' ) )
  start_date = OOOo00oo0oO + datetime . timedelta ( days = IIiIi1iI )
  start_date = datetime . datetime . strftime ( start_date , '%Y-%m-%d' )
 if mode == MODES . MY_CAL :
  oOoo0oOo00 = Oo . get_my_calendar ( start_date , 8 )
 elif mode == MODES . CAL :
  oOoo0oOo00 = Oo . get_calendar ( start_date , 8 )
 elif mode == MODES . PREMIERES :
  oOoo0oOo00 = Oo . get_premieres ( start_date , 8 )
 IiiiIiii11 ( mode , start_date , oOoo0oOo00 )
 if 92 - 92: ii1IiI1i + o00 * oO0o % oOooOoO0Oo0O
@ IiII . register ( MODES . MY_LISTS , [ 'section' ] )
def i1I1i1 ( section ) :
 O0OoooO0 = Oo . get_lists ( )
 O0OoooO0 . insert ( 0 , { 'name' : 'watchlist' , 'ids' : { 'slug' : transistortv_utils . WATCHLIST_SLUG } } )
 ooo0O0o00O = len ( O0OoooO0 )
 for iiI111I1iIiI in O0OoooO0 :
  IiiiOO0OoO0o00 ( section , iiI111I1iIiI , ooo0O0o00O )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 48 - 48: Oo0oO0ooo / o00 . iIii1I11I1II1 * ii1IiI1i * IiiIII111iI / i1IIi
def IiiiOO0OoO0o00 ( section , user_list , total_items = 0 ) :
 OOOOoOOo0O0 = user_list [ 'ids' ]
 II11iiii1Ii = [ ]
 ii1I = { 'mode' : MODES . SET_FAV_LIST , 'slug' : OOOOoOOo0O0 [ 'slug' ] , 'section' : section }
 II11iiii1Ii . append ( ( i18n ( 'set_fav_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_SUB_LIST , 'slug' : OOOOoOOo0O0 [ 'slug' ] , 'section' : section }
 II11iiii1Ii . append ( ( i18n ( 'set_sub_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_REWATCH_LIST , 'slug' : OOOOoOOo0O0 [ 'slug' ] , 'section' : SECTIONS . TV }
 II11iiii1Ii . append ( ( i18n ( 'set_rewatch_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . COPY_LIST , 'slug' : COLLECTION_SLUG , 'section' : section , 'target_slug' : OOOOoOOo0O0 [ 'slug' ] }
 II11iiii1Ii . append ( ( i18n ( 'import_collection' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . FORCE_REFRESH , 'refresh_mode' : MODES . SHOW_LIST , 'section' : section , 'slug' : OOOOoOOo0O0 [ 'slug' ] }
 II11iiii1Ii . append ( ( i18n ( 'force_refresh' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if OOOOoOOo0O0 [ 'slug' ] != transistortv_utils . WATCHLIST_SLUG :
  if OOOOoOOo0O0 [ 'slug' ] in kodi . get_setting ( '%s_main' % ( section ) ) . split ( '|' ) :
   iIi1ii1I1 = i18n ( 'remove_from_main' )
   oOooo0 = 'remove'
  else :
   iIi1ii1I1 = i18n ( 'add_to_main' )
   oOooo0 = 'add'
  ii1I = { 'mode' : MODES . TOGGLE_TO_MENU , 'action' : oOooo0 , 'section' : section , 'slug' : OOOOoOOo0O0 [ 'slug' ] }
  II11iiii1Ii . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 58 - 58: oOooOoO0Oo0O . II1i + ii1IiI1i
 ii1I = { 'mode' : MODES . SHOW_LIST , 'section' : section , 'slug' : OOOOoOOo0O0 [ 'slug' ] }
 kodi . create_item ( ii1I , user_list [ 'name' ] , thumb = utils2 . art ( 'list.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True ,
 total_items = total_items , menu_items = II11iiii1Ii , replace_menu = False )
 if 66 - 66: II1i / IiiIII111iI * OoooooooOO + OoooooooOO % iiI1i1
@ IiII . register ( MODES . LIKED_LISTS , [ 'section' ] , [ 'page' ] )
def IIii1111 ( section , page = 1 ) :
 I1iI = Oo . get_liked_lists ( page = page )
 ooo0O0o00O = len ( I1iI )
 for IIIIiIiIi1 in I1iI :
  I11iiiiI1i = ( IIIIiIiIi1 [ 'list' ] [ 'user' ] [ 'username' ] , IIIIiIiIi1 [ 'list' ] [ 'ids' ] [ 'slug' ] )
  iI1i11 ( MODES . LIKED_LISTS , section , I11iiiiI1i , ooo0O0o00O )
  if 66 - 66: O0 % I11iIi1I + i11iIiiIii . ii1IiI1i / oO0o + I11iIi1I
 I1iiii1I = { 'mode' : MODES . LIKED_LISTS , 'section' : section }
 if I1iiii1I and page and ooo0O0o00O >= int ( kodi . get_setting ( 'list_size' ) ) :
  I1iiii1I [ 'page' ] = int ( page ) + 1
  iIi1ii1I1 = '%s >>' % ( i18n ( 'next_page' ) )
  kodi . create_item ( I1iiii1I , iIi1ii1I1 , thumb = utils2 . art ( 'nextpage.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 86 - 86: OOooOOo
@ IiII . register ( MODES . OTHER_LISTS , [ 'section' ] )
def i1Iii11Ii1i1 ( section ) :
 kodi . create_item ( { 'mode' : MODES . ADD_OTHER_LIST , 'section' : section } , i18n ( 'add_other_list' ) , thumb = utils2 . art ( 'add_other.png' ) ,
 fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
 if 59 - 59: o0 % OoooooooOO . II1i / o00ooo0 + oOooOoO0Oo0O
 O0OoooO0 = db_connection . get_other_lists ( section )
 ooo0O0o00O = len ( O0OoooO0 )
 for ooOO0O0ooOooO in O0OoooO0 :
  iI1i11 ( MODES . OTHER_LISTS , section , ooOO0O0ooOooO , ooo0O0o00O )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 76 - 76: Oo0oO0ooo
def iI1i11 ( mode , section , other_list , total_items = 0 ) :
 try :
  OOIi1iI111II1I1 = Oo . get_list_header ( other_list [ 1 ] , other_list [ 0 ] , bool ( iI1 ) )
 except ( TraktNotFoundError , TraktAuthError ) as OoO0O00O0oo0O :
  o0OO00 . log ( 'List Access Failure: %s' % ( OoO0O00O0oo0O ) , log_utils . LOGWARNING )
  OOIi1iI111II1I1 = None
  if 36 - 36: Ii11111i + O0 - oO0o - O0 % iiI1i1 . IiiIII111iI
 if OOIi1iI111II1I1 :
  if len ( other_list ) >= 3 and other_list [ 2 ] :
   OOooooO0Oo = other_list [ 2 ]
  else :
   OOooooO0Oo = OOIi1iI111II1I1 [ 'name' ]
 else :
  OOooooO0Oo = other_list [ 1 ]
  if 74 - 74: i11iIiiIii . oOooOoO0Oo0O
 II11iiii1Ii = [ ]
 if OOIi1iI111II1I1 :
  ii1I = { 'mode' : MODES . FORCE_REFRESH , 'refresh_mode' : MODES . SHOW_LIST , 'section' : section , 'slug' : other_list [ 1 ] , 'username' : other_list [ 0 ] }
  II11iiii1Ii . append ( ( i18n ( 'force_refresh' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  ii1I = { 'mode' : MODES . COPY_LIST , 'section' : section , 'slug' : other_list [ 1 ] , 'username' : other_list [ 0 ] }
  II11iiii1Ii . append ( ( i18n ( 'copy_to_my_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 36 - 36: OoooooooOO . i1
 iIIIIi1iiIi1 = '%s@%s' % ( other_list [ 1 ] , other_list [ 0 ] )
 if iIIIIi1iiIi1 in kodi . get_setting ( '%s_main' % ( section ) ) . split ( '|' ) :
  iIi1ii1I1 = i18n ( 'remove_from_main' )
  oOooo0 = 'remove'
 else :
  iIi1ii1I1 = i18n ( 'add_to_main' )
  oOooo0 = 'add'
 ii1I = { 'mode' : MODES . TOGGLE_TO_MENU , 'action' : oOooo0 , 'section' : section , 'slug' : other_list [ 1 ] , 'username' : other_list [ 0 ] }
 II11iiii1Ii . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if 56 - 56: o0 . I11iIi1I . oOooOoO0Oo0O
 if mode == MODES . OTHER_LISTS :
  ii1I = { 'mode' : MODES . ADD_OTHER_LIST , 'section' : section , 'username' : other_list [ 0 ] }
  II11iiii1Ii . append ( ( i18n ( 'add_more_from' ) % ( other_list [ 0 ] ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  ii1I = { 'mode' : MODES . REMOVE_LIST , 'section' : section , 'slug' : other_list [ 1 ] , 'username' : other_list [ 0 ] }
  II11iiii1Ii . append ( ( i18n ( 'remove_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  ii1I = { 'mode' : MODES . RENAME_LIST , 'section' : section , 'slug' : other_list [ 1 ] , 'username' : other_list [ 0 ] , 'name' : OOooooO0Oo }
  II11iiii1Ii . append ( ( i18n ( 'rename_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 39 - 39: O0 + o00
 if OOIi1iI111II1I1 :
  ii1I = { 'mode' : MODES . SHOW_LIST , 'section' : section , 'slug' : other_list [ 1 ] , 'username' : other_list [ 0 ] }
 else :
  ii1I = { 'mode' : MODES . OTHER_LISTS , 'section' : section }
 iIi1ii1I1 = '[[COLOR blue]%s[/COLOR]] %s' % ( other_list [ 0 ] , OOooooO0Oo )
 if 91 - 91: OoooooooOO - iIii1I11I1II1 + ii1IiI1i / i1 . ii1IiI1i + O0
 kodi . create_item ( ii1I , iIi1ii1I1 , thumb = utils2 . art ( 'list.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True , total_items = total_items , menu_items = II11iiii1Ii , replace_menu = True )
 if 26 - 26: I11iIi1I - OoooooooOO
@ IiII . register ( MODES . TOGGLE_TO_MENU , [ 'action' , 'section' , 'slug' ] , [ 'username' ] )
def iiI1iI111ii1i ( action , section , slug , username = None ) :
 if username is None :
  iIIIIi1iiIi1 = slug
 else :
  iIIIIi1iiIi1 = '%s@%s' % ( slug , username )
  if 32 - 32: i11i * ii1IiI1i % i1IIi - II1i + iIii1I11I1II1 + I11iIi1I
 I1111i = '%s_main' % ( section )
 Oo0o00 = kodi . get_setting ( I1111i )
 if Oo0o00 :
  i1I11i1I = Oo0o00 . split ( '|' )
 else :
  i1I11i1I = [ ]
  if 60 - 60: I11iIi1I % ii1IiI1i * i1 % i11i
 if action == 'add' :
  i1I11i1I . append ( iIIIIi1iiIi1 )
 else :
  for o00o0 , oOOOoo00 in enumerate ( i1I11i1I ) :
   if oOOOoo00 == iIIIIi1iiIi1 :
    del i1I11i1I [ o00o0 ]
    break
    if 70 - 70: i1 % IiiIII111iI + Ii11111i / oO0o % O0
 Oo0o00 = '|' . join ( i1I11i1I )
 kodi . set_setting ( I1111i , Oo0o00 )
 kodi . refresh_container ( )
 if 100 - 100: OOooOOo + Ii11111i * OOooOOo
@ IiII . register ( MODES . REMOVE_LIST , [ 'section' , 'username' , 'slug' ] )
def oOOo0OOOo00O ( section , username , slug ) :
 db_connection . delete_other_list ( section , username , slug )
 kodi . refresh_container ( )
 if 76 - 76: i11iIiiIii + OOooOOo / I11iIi1I - i1 - oO0o + I11iIi1I
@ IiII . register ( MODES . RENAME_LIST , [ 'section' , 'slug' , 'username' , 'name' ] )
def oo ( section , slug , username , name ) :
 I1i = kodi . get_keyboard ( i18n ( 'new_name_heading' ) , name )
 if I1i is not None :
  db_connection . rename_other_list ( section , username , slug , I1i )
 kodi . refresh_container ( )
 if 32 - 32: ii1IiI1i / i1 + Ii11111i
@ IiII . register ( MODES . ADD_OTHER_LIST , [ 'section' ] , [ 'username' ] )
def ii1I1i1iiiI ( section , username = None ) :
 if username is None :
  username = kodi . get_keyboard ( i18n ( 'username_list_owner' ) )
  if 96 - 96: OoooooooOO + IiiIII111iI
 if username is not None :
  iiII1i11i = IiIi ( None , section , username )
  if iiII1i11i :
   db_connection . add_other_list ( section , username , iiII1i11i )
   kodi . refresh_container ( )
   if 87 - 87: I11iIi1I - I11iIi1I - II1i + IiiIII111iI
def o00oooO0Oo ( cached = True ) :
 OOooo = [ ]
 i1iIi = [ ]
 iiiIi = O0i1II1Iiii1I11 ( SECTIONS . TV , kodi . get_setting ( 'rewatch_slug' ) )
 if iiiIi is not None :
  iIIiIiI1I1 = time . time ( )
  i1i1iI1iiiI = dict ( ( item [ 'show' ] [ 'ids' ] [ 'trakt' ] , item ) for item in Oo . get_watched ( SECTIONS . TV , cached = cached ) )
  ooO = dict ( ( item [ 'ids' ] [ 'trakt' ] , i ) for i , item in enumerate ( iiiIi ) )
  iiOO0O0Ooo = oOoO0 = int ( kodi . get_setting ( 'trakt_timeout' ) )
  try :
   Oo0 = worker_pool . WorkerPool ( )
   I11i = len ( iiiIi )
   oo0O0o00o0O = { }
   for iiIiIIIiiI in iiiIi :
    I11i1II = iiIiIIIiiI [ 'ids' ] [ 'trakt' ]
    Ooo = utils2 . make_plays ( i1i1iI1iiiI . get ( I11i1II , { } ) )
    Oo0 . request ( transistortv_utils . parallel_get_progress , [ I11i1II , cached , None ] )
    oo0O0o00o0O [ I11i1II ] = { 'show' : iiIiIIIiiI , 'plays' : Ooo }
    if 21 - 21: o0
   while len ( OOooo ) < I11i :
    try :
     o0OO00 . log ( 'Waiting on progress - Timeout: %s' % ( iiOO0O0Ooo ) , log_utils . LOGDEBUG )
     I1ii1 = Oo0 . receive ( iiOO0O0Ooo )
     I11i1II = I1ii1 [ 'trakt' ]
     O00 = utils2 . get_next_rewatch ( I11i1II , Ooo , I1ii1 )
     iiIiIIIiiI = oo0O0o00o0O [ I11i1II ] [ 'show' ]
     o0OO00 . log ( 'Next Rewatch: %s (%s) - %s - %s' % ( iiIiIIIiiI [ 'title' ] , iiIiIIIiiI [ 'year' ] , I11i1II , O00 ) , log_utils . LOGDEBUG )
     if O00 :
      Oo0o0000OOoO = { 'episode' : O00 }
      Oo0o0000OOoO . update ( oo0O0o00o0O [ I11i1II ] )
      OOooo . append ( Oo0o0000OOoO )
      if 46 - 46: O0 * i11i - o0 * Oo0oO0ooo
     if oOoO0 > 0 :
      iiOO0O0Ooo = oOoO0 - ( time . time ( ) - iIIiIiI1I1 )
      if iiOO0O0Ooo < 0 : iiOO0O0Ooo = 0
    except worker_pool . Empty :
     o0OO00 . log ( 'Get Progress Process Timeout' , log_utils . LOGWARNING )
     iiOO0O0Ooo = True
     break
   else :
    o0OO00 . log ( 'All progress results received' , log_utils . LOGDEBUG )
    iiOO0O0Ooo = False
    if 33 - 33: oO0o
   if iiOO0O0Ooo :
    OOOoOoO = i18n ( 'progress_timeouts' ) % ( I11i - len ( OOooo ) , I11i )
    kodi . notify ( msg = OOOoOoO , duration = 5000 )
    o0OO00 . log ( OOOoOoO , log_utils . LOGWARNING )
    if 22 - 22: oOooOoO0Oo0O % I11iIi1I
   OOooo . sort ( key = lambda o0oo0O : ooO [ o0oo0O [ 'show' ] [ 'ids' ] [ 'trakt' ] ] )
  finally :
   i1iIi = Oo0 . close ( )
   if 13 - 13: i11iIiiIii + i1IIi * iIii1I11I1II1 % OoooooooOO - i11i * Ii11111i
 return i1iIi , OOooo
 if 26 - 26: OoooooooOO * oOooOoO0Oo0O + Ii11111i
@ IiII . register ( MODES . SHOW_REWATCH )
def IiIii1i111 ( ) :
 iiII1i11i = kodi . get_setting ( 'rewatch_slug' )
 if not iiII1i11i :
  kodi . create_item ( { 'mode' : MODES . PICK_REWATCH_LIST , 'section' : SECTIONS . TV } , i18n ( 'pick_rewatch_list' ) , is_folder = False , is_playable = False )
  kodi . set_content ( CONTENT_TYPES . ADDONS )
  kodi . end_of_directory ( )
 else :
  try :
   i1iIi , OOooo = o00oooO0Oo ( )
   ooo0O0o00O = len ( OOooo )
   for Oo0o0000OOoO in OOooo :
    iiIiIIIiiI = Oo0o0000OOoO [ 'show' ]
    I11i1II = iiIiIIIiiI [ 'ids' ] [ 'trakt' ]
    Ooo = Oo0o0000OOoO [ 'plays' ]
    O00 = Oo0o0000OOoO [ 'episode' ]
    iI = Oo . get_episode_details ( I11i1II , O00 [ 'season' ] , O00 [ 'episode' ] )
    iI [ 'watched' ] = Ooo . get ( O00 [ 'season' ] , { } ) . get ( O00 [ 'episode' ] , 0 ) > 0
    if 74 - 74: oOooOoO0Oo0O
    II11iiii1Ii = [ ]
    ii1I = { 'mode' : MODES . SEASONS , 'trakt_id' : I11i1II , 'title' : iiIiIIIiiI [ 'title' ] , 'year' : iiIiIIIiiI [ 'year' ] , 'tvdb_id' : iiIiIIIiiI [ 'ids' ] [ 'tvdb' ] }
    II11iiii1Ii . append ( ( i18n ( 'browse_seasons' ) , 'Container.Update(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
    iIi1ii1I1 , o0o0oOoOO0O = utils2 . get_next_rewatch_method ( I11i1II )
    ii1I = { 'mode' : MODES . MANAGE_REWATCH , 'trakt_id' : I11i1II , 'new_method' : o0o0oOoOO0O }
    II11iiii1Ii . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
    if iI [ 'watched' ] :
     ii1I = { 'mode' : MODES . TOGGLE_WATCHED , 'section' : SECTIONS . TV , 'season' : iI [ 'season' ] , 'episode' : iI [ 'number' ] , 'watched' : True }
     ii1I . update ( utils2 . show_id ( iiIiIIIiiI ) )
     II11iiii1Ii . append ( ( i18n ( 'mark_as_watched' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
     if 16 - 16: o00ooo0 % iIii1I11I1II1 . oO0o
    O0o0Oo , Oo00OOOOO = I11i1 ( iiIiIIIiiI , iI , show_subs = False , menu_items = II11iiii1Ii )
    iIi1ii1I1 = O0o0Oo . getLabel ( )
    iIi1ii1I1 = '%s - %s' % ( iiIiIIIiiI [ 'title' ] , iIi1ii1I1 )
    O0o0Oo . setLabel ( iIi1ii1I1 )
    xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = False , totalItems = ooo0O0o00O )
   kodi . set_content ( CONTENT_TYPES . EPISODES )
   kodi . end_of_directory ( cache_to_disc = False )
  finally :
   try : worker_pool . reap_workers ( i1iIi , None )
   except UnboundLocalError : pass
   if 59 - 59: oOooOoO0Oo0O * i11i . O0
@ IiII . register ( MODES . MANAGE_REWATCH , [ 'trakt_id' , 'new_method' ] )
def O000OoOO0 ( trakt_id , new_method ) :
 i1IiIII111i1 = utils2 . get_min_rewatch_list ( )
 o000ooooo0 = utils2 . get_max_rewatch_list ( )
 if new_method == REWATCH_METHODS . LEAST_WATCHED :
  if trakt_id not in i1IiIII111i1 : i1IiIII111i1 . append ( trakt_id )
  if trakt_id in o000ooooo0 : o000ooooo0 . remove ( trakt_id )
 elif new_method == REWATCH_METHODS . MOST_WATCHED :
  if trakt_id in i1IiIII111i1 : i1IiIII111i1 . remove ( trakt_id )
  if trakt_id not in o000ooooo0 : o000ooooo0 . append ( trakt_id )
 else :
  if trakt_id in i1IiIII111i1 : i1IiIII111i1 . remove ( trakt_id )
  if trakt_id in o000ooooo0 : o000ooooo0 . remove ( trakt_id )
 kodi . set_setting ( 'rewatch_min_list' , '|' . join ( i1IiIII111i1 ) )
 kodi . set_setting ( 'rewatch_max_list' , '|' . join ( o000ooooo0 ) )
 kodi . refresh_container ( )
 if 51 - 51: i1 - O0 % IiiIII111iI - i11i
@ IiII . register ( MODES . SHOW_LIST , [ 'section' , 'slug' ] , [ 'username' ] )
def I1II ( section , slug , username = None ) :
 IiI111111IIII = O0i1II1Iiii1I11 ( section , slug , username )
 if IiI111111IIII is not None :
  OOoO000O0OO ( section , IiI111111IIII , slug )
  if 64 - 64: O0 % iiI1i1 % O0 * i1 . IiiIII111iI + oOooOoO0Oo0O
@ IiII . register ( MODES . SHOW_WATCHLIST , [ 'section' ] )
def O00I11ii1i1 ( section ) :
 I1II ( section , transistortv_utils . WATCHLIST_SLUG )
 if 78 - 78: II1i
@ IiII . register ( MODES . SHOW_COLLECTION , [ 'section' ] )
def iIiIIIIIii ( section ) :
 IiI111111IIII = Oo . get_collection ( section )
 oO0o0 = int ( kodi . get_setting ( 'sort_collection' ) )
 if oO0o0 == 1 :
  IiI111111IIII . reverse ( )
 elif oO0o0 == 2 :
  IiI111111IIII . sort ( key = lambda o0oo0O : utils2 . title_key ( o0oo0O [ 'title' ] ) )
 elif oO0o0 == 3 :
  IiI111111IIII . sort ( key = lambda o0oo0O : o0oo0O [ 'year' ] )
  if 58 - 58: OOooOOo / o00ooo0 . ii1IiI1i / OoooooooOO + o00
  if 86 - 86: iiI1i1 * oOooOoO0Oo0O + iiI1i1 + i11i
 if section == SECTIONS . TV :
  for oOOOoo00 in IiI111111IIII :
   i1i111iI = len ( [ OoO0O00O0oo0O for IIiiI in oOOOoo00 [ 'seasons' ] if IIiiI [ 'number' ] != 0 for OoO0O00O0oo0O in IIiiI [ 'episodes' ] ] )
   o0OO00 . log ( '%s/%s: Collected: %s - Aired: %s' % ( oOOOoo00 [ 'ids' ] [ 'trakt' ] , oOOOoo00 [ 'ids' ] [ 'slug' ] , i1i111iI , oOOOoo00 [ 'aired_episodes' ] ) , log_utils . LOGDEBUG )
   if i1i111iI > oOOOoo00 [ 'aired_episodes' ] :
    oOOOoo00 [ 'aired_episodes' ] = i1i111iI
    if 31 - 31: I11iIi1I + oO0o + o00 / oO0o
 OOoO000O0OO ( section , IiI111111IIII , COLLECTION_SLUG )
 if 25 - 25: i1
def II1I ( cached = True ) :
 if cached :
  i11iI11iIiIi , O00O0ooo0 = db_connection . get_cached_function ( II1I . __name__ , cache_limit = 15 * 60 )
  if i11iI11iIiIi :
   return [ ] , utils2 . sort_progress ( O00O0ooo0 , sort_order = SORT_MAP [ int ( kodi . get_setting ( 'sort_progress' ) ) ] )
   if 8 - 8: Oo0oO0ooo + i11i / II1i / iiI1i1
 i1iIi = [ ]
 ooo0O = [ ]
 with kodi . ProgressDialog ( i18n ( 'discover_mne' ) , background = True ) as iII1iii :
  iIIiIiI1I1 = time . time ( )
  iiOO0O0Ooo = oOoO0 = int ( kodi . get_setting ( 'trakt_timeout' ) )
  iII1iii . update ( 0 , line1 = i18n ( 'retr_history' ) )
  i11i1iiiII = Oo . get_watched ( SECTIONS . TV , full = True , noseasons = True , cached = cached )
  if kodi . get_setting ( 'include_watchlist_next' ) == 'true' :
   iII1iii . update ( 5 , line1 = i18n ( 'retr_watchlist' ) )
   ooOO0oO0oo00o = Oo . show_watchlist ( SECTIONS . TV )
   ooOO0oO0oo00o = [ { 'show' : oOOOoo00 } for oOOOoo00 in ooOO0oO0oo00o ]
   i11i1iiiII += ooOO0oO0oo00o
   if 83 - 83: IiiIII111iI - i11i - II1i
  iII1iii . update ( 10 , line1 = i18n ( 'retr_hidden' ) )
  iIi11iiIiI1I = set ( [ oOOOoo00 [ 'show' ] [ 'ids' ] [ 'trakt' ] for oOOOoo00 in Oo . get_hidden_progress ( cached = cached ) ] )
  if 3 - 3: i1IIi / i11i / i11iIiiIii * i1IIi - i11i
  oo0O0o00o0O = { }
  Ii = set ( utils2 . get_progress_skip_list ( ) )
  iII1111III1I = set ( utils2 . get_force_progress_list ( ) )
  ii11i = kodi . get_setting ( 'use_cached_exclusion' ) == 'true'
  O00oOo00o0o = len ( i11i1iiiII )
  try :
   Oo0 = worker_pool . WorkerPool ( max_workers = 50 )
   for o00o0 , iiIiIIIiiI in enumerate ( i11i1iiiII ) :
    I11i1II = iiIiIIIiiI [ 'show' ] [ 'ids' ] [ 'trakt' ]
    if 85 - 85: II1i + OoooooooOO * II1i - o00 % i11iIiiIii
    if I11i1II in iIi11iiIiI1I :
     continue
     if 71 - 71: I11iIi1I - Oo0oO0ooo / ii1IiI1i * ii1IiI1i / i1IIi . i1IIi
     if 53 - 53: o00
    if ii11i and str ( I11i1II ) in Ii and str ( I11i1II ) not in iII1111III1I :
     o0OO00 . log ( 'Skipping %s (%s) as cached MNE ended exclusion' % ( I11i1II , iiIiIIIiiI [ 'show' ] [ 'title' ] ) , log_utils . LOGDEBUG )
     continue
     if 21 - 21: iiI1i1
    OoO00 = ( o00o0 + 1 ) * 25 / O00oOo00o0o + 10
    iII1iii . update ( OoO00 , line1 = i18n ( 'req_progress' ) % ( iiIiIIIiiI [ 'show' ] [ 'title' ] ) )
    Oo0 . request ( transistortv_utils . parallel_get_progress , [ I11i1II , cached , .08 ] )
    oo0O0o00o0O [ I11i1II ] = iiIiIIIiiI [ 'show' ]
    if 85 - 85: o0 * o0 * oOooOoO0Oo0O . OoooooooOO . oO0o * Oo0oO0ooo
   o000oOoo0o000 = len ( oo0O0o00o0O )
   IiI11iI1i1i1i = 0
   while IiI11iI1i1i1i < o000oOoo0o000 :
    try :
     o0OO00 . log ( 'Waiting for Progress - Timeout: %s' % ( iiOO0O0Ooo ) , log_utils . LOGDEBUG )
     I1ii1 = Oo0 . receive ( iiOO0O0Ooo )
     IiI11iI1i1i1i += 1
     I11i1II = I1ii1 [ 'trakt' ]
     iiIiIIIiiI = oo0O0o00o0O [ I11i1II ]
     OoO00 = ( IiI11iI1i1i1i * 65 / o000oOoo0o000 ) + 35
     iII1iii . update ( OoO00 , line1 = i18n ( 'rec_progress' ) % ( iiIiIIIiiI [ 'title' ] ) )
     if 'next_episode' in I1ii1 and I1ii1 [ 'next_episode' ] :
      iI = { 'show' : iiIiIIIiiI , 'episode' : I1ii1 [ 'next_episode' ] }
      iI [ 'last_watched_at' ] = I1ii1 [ 'last_watched_at' ]
      iI [ 'percent_completed' ] = ( I1ii1 [ 'completed' ] * 100 ) / I1ii1 [ 'aired' ] if I1ii1 [ 'aired' ] > 0 else 0
      iI [ 'completed' ] = I1ii1 [ 'completed' ]
      ooo0O . append ( iI )
     else :
      oO0Ooooooo = iiIiIIIiiI [ 'status' ] and iiIiIIIiiI [ 'status' ] . upper ( ) == 'ENDED'
      I1IIIiI1I1ii1 = I1ii1 [ 'completed' ] == I1ii1 [ 'aired' ]
      if oO0Ooooooo and I1IIIiI1I1ii1 and str ( I11i1II ) not in Ii and str ( I11i1II ) not in iII1111III1I :
       o0OO00 . log ( 'Adding %s (%s) (%s - %s) to MNE exclusion list' % ( I11i1II , iiIiIIIiiI [ 'title' ] , I1ii1 [ 'completed' ] , I1ii1 [ 'aired' ] ) , log_utils . LOGDEBUG )
       iiiI1I1iIIIi1 ( ACTIONS . ADD , I1ii1 [ 'trakt' ] )
       if 17 - 17: iIii1I11I1II1 . OoooooooOO / iiI1i1 % i11i % i1IIi / i11iIiiIii
     if oOoO0 > 0 :
      iiOO0O0Ooo = oOoO0 - ( time . time ( ) - iIIiIiI1I1 )
      if iiOO0O0Ooo < 0 : iiOO0O0Ooo = 0
    except worker_pool . Empty :
     o0OO00 . log ( 'Get Progress Process Timeout' , log_utils . LOGWARNING )
     iiOO0O0Ooo = True
     break
   else :
    o0OO00 . log ( 'All progress results received' , log_utils . LOGDEBUG )
    iiOO0O0Ooo = False
  finally :
   i1iIi = Oo0 . close ( )
   if 58 - 58: o0 . i11i + IiiIII111iI - i11iIiiIii / i11i / O0
  if iiOO0O0Ooo :
   oOOoOo = o000oOoo0o000 - IiI11iI1i1i1i
   OOOoOoO = i18n ( 'progress_timeouts' ) % ( oOOoOo , o000oOoo0o000 )
   kodi . notify ( msg = OOOoOoO , duration = 5000 )
   o0OO00 . log ( OOOoOoO , log_utils . LOGWARNING )
  else :
   if 89 - 89: i11i + i1IIi + i11i
   db_connection . cache_function ( II1I . __name__ , result = ooo0O )
   if 7 - 7: O0 % OOooOOo + I11iIi1I * II1i - II1i
 return i1iIi , utils2 . sort_progress ( ooo0O , sort_order = SORT_MAP [ int ( kodi . get_setting ( 'sort_progress' ) ) ] )
 if 42 - 42: ii1IiI1i * ii1IiI1i * o00 . iiI1i1
@ IiII . register ( MODES . SHOW_PROGRESS )
def O0Oo0o000oO ( ) :
 try :
  i1iIi , I1ii1 = II1I ( )
  for iI in I1ii1 :
   o0OO00 . log ( 'Episode: Sort Keys: Tile: |%s| Last Watched: |%s| Percent: |%s%%| Completed: |%s|' % ( iI [ 'show' ] [ 'title' ] , iI [ 'last_watched_at' ] , iI [ 'percent_completed' ] , iI [ 'completed' ] ) , log_utils . LOGDEBUG )
   oO0o00oOOooO0 = utils . iso_2_utc ( iI [ 'episode' ] [ 'first_aired' ] )
   if kodi . get_setting ( 'show_unaired_next' ) == 'true' or oO0o00oOOooO0 <= time . time ( ) :
    iiIiIIIiiI = iI [ 'show' ]
    OOOoO000 = utils2 . make_day ( utils2 . make_air_date ( iI [ 'episode' ] [ 'first_aired' ] ) )
    if kodi . get_setting ( 'mne_time' ) != '0' :
     oOOOO = '%s@%s' % ( OOOoO000 , utils2 . make_time ( oO0o00oOOooO0 , 'mne_time' ) )
    else :
     oOOOO = OOOoO000
     if 49 - 49: i11i . IiiIII111iI . i11iIiiIii % o00ooo0
    II11iiii1Ii = [ ]
    ii1I = { 'mode' : MODES . SEASONS , 'trakt_id' : iiIiIIIiiI [ 'ids' ] [ 'trakt' ] , 'title' : iiIiIIIiiI [ 'title' ] , 'year' : iiIiIIIiiI [ 'year' ] , 'tvdb_id' : iiIiIIIiiI [ 'ids' ] [ 'tvdb' ] }
    II11iiii1Ii . append ( ( i18n ( 'browse_seasons' ) , 'Container.Update(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
    O0o0Oo , Oo00OOOOO = I11i1 ( iiIiIIIiiI , iI [ 'episode' ] , show_subs = False , menu_items = II11iiii1Ii )
    iIi1ii1I1 = O0o0Oo . getLabel ( )
    iIi1ii1I1 = '[[COLOR deeppink]%s[/COLOR]] %s - %s' % ( oOOOO , iiIiIIIiiI [ 'title' ] , iIi1ii1I1 )
    O0o0Oo . setLabel ( iIi1ii1I1 )
    if 34 - 34: o00 % o00ooo0
    xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = False )
  kodi . set_content ( CONTENT_TYPES . EPISODES )
  kodi . end_of_directory ( cache_to_disc = False )
 finally :
  try : worker_pool . reap_workers ( i1iIi , None )
  except UnboundLocalError : pass
  if 3 - 3: i11i / Ii11111i + o00ooo0 . Oo0oO0ooo . i1
@ IiII . register ( MODES . MANAGE_SUBS , [ 'section' ] )
def oOoo000 ( section ) :
 iiII1i11i = kodi . get_setting ( '%s_sub_slug' % ( section ) )
 if iiII1i11i :
  OooOo00o = transistortv_utils . get_next_run ( MODES . UPDATE_SUBS )
  iIi1ii1I1 = i18n ( 'update_subs' )
  if kodi . get_setting ( 'auto-' + MODES . UPDATE_SUBS ) == 'true' :
   IiI11i1IIiiI = 'green'
   oOOo000oOoO0 = OooOo00o . strftime ( "%Y-%m-%d %I:%M:%S %p" )
  else :
   IiI11i1IIiiI = 'red'
   oOOo000oOoO0 = i18n ( 'disabled' )
  kodi . create_item ( { 'mode' : MODES . UPDATE_SUBS , 'section' : section } , iIi1ii1I1 % ( IiI11i1IIiiI , oOOo000oOoO0 ) , thumb = utils2 . art ( 'update_subscriptions.png' ) ,
 fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = False , is_playable = False )
  if section == SECTIONS . TV :
   kodi . create_item ( { 'mode' : MODES . CLEAN_SUBS } , i18n ( 'cleanup_subs' ) , thumb = utils2 . art ( 'clean_up.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) ,
 is_folder = False , is_playable = False )
 OoOo00o0OO ( iiII1i11i , i18n ( 'pick_sub_list' ) , MODES . PICK_SUB_LIST , section )
 if 1 - 1: oOooOoO0Oo0O % Oo0oO0ooo
@ IiII . register ( MODES . SHOW_FAVORITES , [ 'section' ] )
def oOoO00 ( section ) :
 iiII1i11i = kodi . get_setting ( '%s_fav_slug' % ( section ) )
 OoOo00o0OO ( iiII1i11i , i18n ( 'pick_fav_list' ) , MODES . PICK_FAV_LIST , section )
 if 40 - 40: OOooOOo
@ IiII . register ( MODES . PICK_SUB_LIST , [ 'mode' , 'section' ] )
@ IiII . register ( MODES . PICK_FAV_LIST , [ 'mode' , 'section' ] )
@ IiII . register ( MODES . PICK_REWATCH_LIST , [ 'mode' , 'section' ] )
def IiIi ( mode , section , username = None ) :
 iiII1i11i , OOOooo = utils . choose_list ( Trakt_API , kodi . Translations ( strings . STRINGS ) , username )
 if iiII1i11i :
  if mode == MODES . PICK_FAV_LIST :
   Oo00oo0000OO ( MODES . SET_FAV_LIST , iiII1i11i , section )
  elif mode == MODES . PICK_SUB_LIST :
   Oo00oo0000OO ( MODES . SET_SUB_LIST , iiII1i11i , section )
  elif mode == MODES . PICK_REWATCH_LIST :
   Oo00oo0000OO ( MODES . SET_REWATCH_LIST , iiII1i11i , SECTIONS . TV )
  else :
   return iiII1i11i
  kodi . refresh_container ( )
  if 69 - 69: Oo0oO0ooo - i1 / i11iIiiIii + I11iIi1I % OoooooooOO
@ IiII . register ( MODES . SET_SUB_LIST , [ 'mode' , 'slug' , 'section' ] )
@ IiII . register ( MODES . SET_FAV_LIST , [ 'mode' , 'slug' , 'section' ] )
@ IiII . register ( MODES . SET_REWATCH_LIST , [ 'mode' , 'slug' , 'section' ] )
def Oo00oo0000OO ( mode , slug , section ) :
 if mode == MODES . SET_FAV_LIST :
  I1111i = '%s_fav_slug' % ( section )
 elif mode == MODES . SET_SUB_LIST :
  I1111i = '%s_sub_slug' % ( section )
 elif mode == MODES . SET_REWATCH_LIST :
  I1111i = 'rewatch_slug'
 kodi . set_setting ( I1111i , slug )
 if 73 - 73: oO0o - o00
@ IiII . register ( MODES . SEARCH , [ 'section' ] )
def O00oooo00o0O ( section , search_text = None ) :
 OOo000 = utils2 . get_section_params ( section )
 ii1iii1I1I = '%s %s' % ( i18n ( 'search' ) , OOo000 [ 'label_plural' ] )
 search_text = kodi . get_keyboard ( ii1iii1I1I )
 if search_text == '' :
  kodi . notify ( msg = i18n ( 'blank_searches' ) , duration = 5000 )
 elif search_text is not None :
  transistortv_utils . keep_search ( section , search_text )
  ii1I = { 'mode' : MODES . SEARCH_RESULTS , 'section' : section , 'query' : search_text }
  oO0Ooo0ooOO0 = kodi . get_plugin_url ( ii1I )
  kodi . update_container ( oO0Ooo0ooOO0 )
  if 46 - 46: oO0o % ii1IiI1i
@ IiII . register ( MODES . RECENT_SEARCH , [ 'section' ] )
def ooo0o0O0o ( section ) :
 OOo000 = utils2 . get_section_params ( section )
 O0OooO = int ( kodi . get_setting ( '%s_search_head' % ( section ) ) )
 for o00o0 in reversed ( range ( 0 , SEARCH_HISTORY ) ) :
  I1IIII1i = ( o00o0 + O0OooO + 1 ) % SEARCH_HISTORY
  ii1Ii1IiIIi = db_connection . get_setting ( '%s_search_%s' % ( section , I1IIII1i ) )
  if not ii1Ii1IiIIi :
   break
   if 83 - 83: iiI1i1 / I11iIi1I
  II11iiii1Ii = [ ]
  Ii1 = { 'mode' : MODES . SAVE_SEARCH , 'section' : section , 'query' : ii1Ii1IiIIi }
  II11iiii1Ii . append ( ( i18n ( 'save_search' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( Ii1 ) ) ) , )
  Ii1 = { 'mode' : MODES . DELETE_RECENT , 'section' : section , 'index' : I1IIII1i }
  II11iiii1Ii . append ( ( i18n ( 'remove_from_recent' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( Ii1 ) ) ) , )
  if 34 - 34: oOooOoO0Oo0O * o0 * o00 / i1 * iiI1i1 / iIii1I11I1II1
  ii1I = { 'mode' : MODES . SEARCH_RESULTS , 'section' : section , 'query' : ii1Ii1IiIIi }
  iIi1ii1I1 = '[%s %s] %s' % ( OOo000 [ 'label_single' ] , i18n ( 'search' ) , ii1Ii1IiIIi )
  kodi . create_item ( ii1I , iIi1ii1I1 , thumb = utils2 . art ( OOo000 [ 'search_img' ] ) , fanart = utils2 . art ( 'fanart.png' ) , is_folder = True , menu_items = II11iiii1Ii )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 74 - 74: o0 / i11iIiiIii - i11i * OOooOOo
@ IiII . register ( MODES . SAVED_SEARCHES , [ 'section' ] )
def IIi1IIIIi ( section ) :
 OOo000 = utils2 . get_section_params ( section )
 for O00oooo00o0O in db_connection . get_searches ( section , order_matters = True ) :
  II11iiii1Ii = [ ]
  O0oOoOOOoOO = { 'mode' : MODES . DELETE_SEARCH , 'search_id' : O00oooo00o0O [ 0 ] }
  II11iiii1Ii . append ( ( i18n ( 'delete_search' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( O0oOoOOOoOO ) ) ) , )
  ii1I = { 'mode' : MODES . SEARCH_RESULTS , 'section' : section , 'query' : O00oooo00o0O [ 1 ] }
  iIi1ii1I1 = '[%s %s] %s' % ( OOo000 [ 'label_single' ] , i18n ( 'search' ) , O00oooo00o0O [ 1 ] )
  kodi . create_item ( ii1I , iIi1ii1I1 , thumb = utils2 . art ( OOo000 [ 'search_img' ] ) , fanart = utils2 . art ( 'fanart.png' ) , is_folder = True , menu_items = II11iiii1Ii )
 kodi . set_content ( CONTENT_TYPES . ADDONS )
 kodi . end_of_directory ( )
 if 70 - 70: Ii11111i / i11i - iIii1I11I1II1 - II1i
@ IiII . register ( MODES . CLEAR_RECENT , [ 'section' ] )
def Iii ( section ) :
 for o00o0 in range ( 0 , SEARCH_HISTORY ) :
  db_connection . set_setting ( '%s_search_%s' % ( section , o00o0 ) , '' )
 kodi . notify ( msg = i18n ( 'recent_cleared' ) , duration = 2500 )
 if 20 - 20: OOooOOo / i1IIi
@ IiII . register ( MODES . DELETE_RECENT , [ 'section' , 'index' ] )
def oO ( section , index ) :
 index = int ( index )
 O0OooO = int ( kodi . get_setting ( '%s_search_head' % ( section ) ) )
 o0OO00 . log ( 'Head is: %s' % ( O0OooO ) , log_utils . LOGDEBUG )
 for o00o0 in range ( SEARCH_HISTORY , 0 , - 1 ) :
  Ii111 = ( o00o0 - 1 + index ) % SEARCH_HISTORY
  oO0 = ( Ii111 + 1 ) % SEARCH_HISTORY
  if Ii111 == O0OooO :
   break
   if 11 - 11: Oo0oO0ooo / i11i
  ii1Ii1IiIIi = db_connection . get_setting ( '%s_search_%s' % ( section , Ii111 ) )
  o0OO00 . log ( 'Moving %s to position %s' % ( ii1Ii1IiIIi , oO0 ) , log_utils . LOGDEBUG )
  db_connection . set_setting ( '%s_search_%s' % ( section , oO0 ) , ii1Ii1IiIIi )
  if 47 - 47: OoooooooOO
 o0OO00 . log ( 'Blanking position %s' % ( oO0 ) , log_utils . LOGDEBUG )
 db_connection . set_setting ( '%s_search_%s' % ( section , oO0 ) , '' )
 kodi . refresh_container ( )
 if 4 - 4: oOooOoO0Oo0O % iiI1i1
@ IiII . register ( MODES . SAVE_SEARCH , [ 'section' , 'query' ] )
def I1 ( section , query ) :
 db_connection . save_search ( section , query )
 if 67 - 67: i1 + IiiIII111iI
@ IiII . register ( MODES . DELETE_SEARCH , [ 'search_id' ] )
def ooO0oO00O0o ( search_id ) :
 db_connection . delete_search ( search_id )
 kodi . refresh_container ( )
 if 70 - 70: o00
@ IiII . register ( MODES . CLEAR_SAVED , [ 'section' ] )
def i11iIIi11 ( section ) :
 for O00oooo00o0O in db_connection . get_searches ( section ) :
  db_connection . delete_search ( O00oooo00o0O [ 0 ] )
 kodi . notify ( msg = i18n ( 'saved_cleared' ) , duration = 2500 )
 if 98 - 98: o00
@ IiII . register ( MODES . SEARCH_RESULTS , [ 'section' , 'query' ] , [ 'page' ] )
def iiI1II11II1i ( section , query , page = 1 ) :
 o0O0O0 = Oo . search ( section , query , page )
 OOoO000O0OO ( section , o0O0O0 , query = { 'mode' : MODES . SEARCH_RESULTS , 'section' : section , 'query' : query } , page = page )
 if 6 - 6: II1i . o00ooo0 * ii1IiI1i . i1IIi
@ IiII . register ( MODES . SEASONS , [ 'trakt_id' , 'title' , 'year' ] , [ 'tvdb_id' ] )
def oOOo ( trakt_id , title , year , tvdb_id = None ) :
 I1IiIIi = sorted ( Oo . get_seasons ( trakt_id ) , key = lambda o0oo0O : o0oo0O [ 'number' ] )
 IiOOo00 = { }
 if iI1 :
  I1ii1 = Oo . get_show_progress ( trakt_id , hidden = True , specials = True )
  IiOOo00 = utils2 . make_seasons_info ( I1ii1 )
  if 37 - 37: i1IIi
 ooo0O0o00O = len ( I1IiIIi )
 for III1i1iI1 in I1IiIIi :
  if kodi . get_setting ( 'show_season0' ) == 'true' or III1i1iI1 [ 'number' ] != 0 :
   o0ooo00o = IiOOo00 . get ( str ( III1i1iI1 [ 'number' ] ) , { 'season' : III1i1iI1 [ 'number' ] } )
   O0o0Oo = oOO00oO00O0OO ( III1i1iI1 , o0ooo00o , trakt_id , title , year , tvdb_id )
   ii1I = { 'mode' : MODES . EPISODES , 'trakt_id' : trakt_id , 'season' : III1i1iI1 [ 'number' ] , 'random' : time . time ( ) }
   kodi . add_item ( ii1I , O0o0Oo , is_folder = True , total_items = ooo0O0o00O )
 kodi . set_view ( CONTENT_TYPES . SEASONS , True )
 kodi . end_of_directory ( )
 if 96 - 96: ii1IiI1i
@ IiII . register ( MODES . EPISODES , [ 'trakt_id' , 'season' ] )
def o0OO0oO0oOO0O ( trakt_id , season ) :
 iiIiIIIiiI = Oo . get_show_details ( trakt_id )
 ooo0O = Oo . get_episodes ( trakt_id , season )
 if iI1 :
  I1ii1 = Oo . get_show_progress ( trakt_id , hidden = True , specials = True )
  ooo0O = utils2 . make_episodes_watched ( ooo0O , I1ii1 )
  if 39 - 39: oO0o * Oo0oO0ooo / ii1IiI1i * i1 . iiI1i1 % i11i
 Ooo0oOooo0 = len ( ooo0O )
 OOOo00oo0oO = time . time ( )
 for iI in ooo0O :
  O0OoOoO00O = utils . iso_2_utc ( iI [ 'first_aired' ] )
  if kodi . get_setting ( 'show_unaired' ) == 'true' or O0OoOoO00O <= OOOo00oo0oO :
   if kodi . get_setting ( 'show_unknown' ) == 'true' or O0OoOoO00O :
    O0o0Oo , Oo00OOOOO = I11i1 ( iiIiIIIiiI , iI )
    xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = False , totalItems = Ooo0oOooo0 )
 kodi . set_view ( CONTENT_TYPES . EPISODES , True )
 kodi . end_of_directory ( )
 if 96 - 96: oOooOoO0Oo0O % o0 . I11iIi1I + Ii11111i
@ IiII . register ( MODES . GET_SOURCES , [ 'mode' , 'video_type' , 'title' , 'year' , 'trakt_id' ] , [ 'season' , 'episode' , 'ep_title' , 'ep_airdate' ] )
@ IiII . register ( MODES . SELECT_SOURCE , [ 'mode' , 'video_type' , 'title' , 'year' , 'trakt_id' ] , [ 'season' , 'episode' , 'ep_title' , 'ep_airdate' ] )
@ IiII . register ( MODES . DOWNLOAD_SOURCE , [ 'mode' , 'video_type' , 'title' , 'year' , 'trakt_id' ] , [ 'season' , 'episode' , 'ep_title' , 'ep_airdate' ] )
@ IiII . register ( MODES . AUTOPLAY , [ 'mode' , 'video_type' , 'title' , 'year' , 'trakt_id' ] , [ 'season' , 'episode' , 'ep_title' , 'ep_airdate' ] )
def Ii11Iii1i1ii ( mode , video_type , title , year , trakt_id , season = '' , episode = '' , ep_title = '' , ep_airdate = '' ) :
 Ii1i1i1111 = kodi . get_setting ( 'cool_down' ) == 'true'
 if not transistortv_utils . is_transistortv ( ) or Ii1i1i1111 :
  kodi . notify ( msg = i18n ( 'playback_limited' ) )
  return False
  if 57 - 57: oO0o % i11i
 iiOO0O0Ooo = oOoO0 = int ( kodi . get_setting ( 'source_timeout' ) )
 if oOoO0 == 0 : iiOO0O0Ooo = None
 O00oOo = int ( kodi . get_setting ( 'source_results' ) )
 iIIiIiI1I1 = time . time ( )
 I1111I1II11 = set ( )
 iiiIIIIiIi = { }
 IiiIIIII1iii = ScraperVideo ( video_type , title , year , trakt_id , season , episode , ep_title , ep_airdate )
 IIiiii = False if kodi . get_setting ( 'pd_force_disable' ) == 'true' else True
 iI111i1I1II = False
 with kodi . ProgressDialog ( i18n ( 'getting_sources' ) , utils2 . make_progress_msg ( IiiIIIII1iii ) , active = IIiiii ) as iII1iii :
  try :
   Oo0 = worker_pool . WorkerPool ( )
   iiIi1IIi1I = transistortv_utils . relevant_scrapers ( video_type )
   O00OO = len ( iiIi1IIi1I )
   for o00o0 , ii in enumerate ( iiIi1IIi1I ) :
    if iII1iii . is_canceled ( ) : return False
    oO0O00oOOoooO = ii ( oOoO0 )
    Oo0 . request ( transistortv_utils . parallel_get_sources , [ oO0O00oOOoooO , IiiIIIII1iii ] )
    I1ii1 = o00o0 * 25 / O00OO
    iII1iii . update ( I1ii1 , line2 = i18n ( 'requested_sources_from' ) % ( ii . get_name ( ) ) )
    I1111I1II11 . add ( ii . get_name ( ) )
    iiiIIIIiIi [ ii . get_name ( ) ] = 0
    if 29 - 29: o0 % i1 % o00ooo0 . OOooOOo / OoooooooOO * Oo0oO0ooo
   o0OoO000O = [ ]
   OOo = 0
   while OOo < O00OO :
    try :
     o0OO00 . log ( 'Waiting on sources - Timeout: %s' % ( iiOO0O0Ooo ) , log_utils . LOGDEBUG )
     O00O0ooo0 = Oo0 . receive ( iiOO0O0Ooo )
     OOo += 1
     iIIiiIIIi1I = len ( O00O0ooo0 [ 'hosters' ] )
     iiiIIIIiIi [ O00O0ooo0 [ 'name' ] ] = iIIiiIIIi1I
     o0OO00 . log ( 'Got %s Source Results from %s' % ( iIIiiIIIi1I , O00O0ooo0 [ 'name' ] ) , log_utils . LOGDEBUG )
     I1ii1 = ( OOo * 75 / O00OO ) + 25
     o0OoO000O += O00O0ooo0 [ 'hosters' ]
     I1111I1II11 . remove ( O00O0ooo0 [ 'name' ] )
     if iII1iii . is_canceled ( ) :
      iI111i1I1II = True
      break
      if 65 - 65: I11iIi1I % O0 % iIii1I11I1II1 * oO0o
     if len ( I1111I1II11 ) > 5 :
      iIIIIIiI1I1 = i18n ( 'remaining_over' ) % ( len ( I1111I1II11 ) , O00OO )
     else :
      iIIIIIiI1I1 = i18n ( 'remaining_under' ) % ( ', ' . join ( [ OOooooO0Oo for OOooooO0Oo in I1111I1II11 ] ) )
     iII1iii . update ( I1ii1 , line2 = i18n ( 'received_sources_from' ) % ( iIIiiIIIi1I , len ( o0OoO000O ) , O00O0ooo0 [ 'name' ] ) , line3 = iIIIIIiI1I1 )
     if 15 - 15: oO0o * o0 % I11iIi1I * iIii1I11I1II1 - i11iIiiIii
     if O00oOo > 0 and len ( o0OoO000O ) >= O00oOo :
      o0OO00 . log ( 'Exceeded max results: %s/%s' % ( O00oOo , len ( o0OoO000O ) ) , log_utils . LOGDEBUG )
      I1111I1II11 = { }
      break
      if 60 - 60: oOooOoO0Oo0O * o00 % i1 + IiiIII111iI
     if oOoO0 > 0 :
      iiOO0O0Ooo = oOoO0 - ( time . time ( ) - iIIiIiI1I1 )
      if iiOO0O0Ooo < 0 : iiOO0O0Ooo = 0
    except worker_pool . Empty :
     o0OO00 . log ( 'Get Sources Scraper Timeouts: %s' % ( ', ' . join ( I1111I1II11 ) ) , log_utils . LOGWARNING )
     break
     if 52 - 52: i1IIi
   else :
    o0OO00 . log ( 'All source results received' , log_utils . LOGDEBUG )
  finally :
   i1iIi = Oo0 . close ( )
   if 84 - 84: oO0o / o00ooo0
  try :
   OOOoOoO = ''
   if not iI111i1I1II :
    utils2 . record_failures ( I1111I1II11 , iiiIIIIiIi )
    oOOoOo = len ( I1111I1II11 )
    if oOOoOo > 4 :
     OOOoOoO = i18n ( 'scraper_timeout' ) % ( oOOoOo , O00OO )
    elif oOOoOo > 0 :
     OOOoOoO = i18n ( 'scraper_timeout_list' ) % ( '/' . join ( [ OOooooO0Oo for OOooooO0Oo in I1111I1II11 ] ) )
     if 86 - 86: ii1IiI1i * i11i - O0 . ii1IiI1i % iIii1I11I1II1 / Ii11111i
   if not o0OoO000O :
    o0OO00 . log ( 'No Sources found for: |%s|' % ( IiiIIIII1iii ) , log_utils . LOGWARNING )
    IiIIiIIIiIii = i18n ( 'no_sources' )
    IiIIiIIIiIii += ' (%s)' % OOOoOoO if OOOoOoO else ''
    kodi . notify ( msg = IiIIiIIIiIii , duration = 5000 )
    return False
    if 23 - 23: II1i + iiI1i1 . ii1IiI1i * oOooOoO0Oo0O + I11iIi1I
   if OOOoOoO :
    kodi . notify ( msg = OOOoOoO , duration = 7500 )
    if 18 - 18: o00ooo0 * OOooOOo . o00ooo0 / O0
   if not I1111I1II11 : iIIIIIiI1I1 = ' '
   iII1iii . update ( 100 , line2 = i18n ( 'applying_source_filters' ) , line3 = iIIIIIiI1I1 )
   o0OoO000O = utils2 . filter_exclusions ( o0OoO000O )
   o0OoO000O = utils2 . filter_quality ( video_type , o0OoO000O )
   o0OoO000O = iiIII1II ( o0OoO000O )
   if kodi . get_setting ( 'enable_sort' ) == 'true' :
    SORT_KEYS [ 'source' ] = transistortv_utils . make_source_sort_key ( )
    o0OoO000O . sort ( key = utils2 . get_sort_key )
   else :
    random . shuffle ( o0OoO000O )
    oOo00oOOOOO = [ ]
    for o00o0 , oOOOoo00 in enumerate ( o0OoO000O ) :
     if isinstance ( oOOOoo00 [ 'class' ] , local_scraper . Scraper ) :
      oOo00oOOOOO . append ( oOOOoo00 )
      o0OoO000O [ o00o0 ] = None
    o0OoO000O = oOo00oOOOOO + [ oOOOoo00 for oOOOoo00 in o0OoO000O if oOOOoo00 is not None ]
    if 85 - 85: OoooooooOO - i1 - o00 / Oo0oO0ooo - iiI1i1
  finally :
   i1iIi = worker_pool . reap_workers ( i1iIi )
   if 49 - 49: ii1IiI1i / o0 . i11iIiiIii
 try :
  if not o0OoO000O :
   o0OO00 . log ( 'No Usable Sources found for: |%s|' % ( IiiIIIII1iii ) , log_utils . LOGDEBUG )
   IiIIiIIIiIii = ' (%s)' % OOOoOoO if OOOoOoO else ''
   kodi . notify ( msg = i18n ( 'no_useable_sources' ) % ( IiIIiIIIiIii ) , duration = 5000 )
   return False
   if 21 - 21: ii1IiI1i + i11iIiiIii + oOooOoO0Oo0O * OOooOOo % II1i % i11i
  oOO0OO0OO = xbmcgui . Window ( 10000 ) . getProperty ( 'PseudoTVRunning' ) . lower ( )
  if oOO0OO0OO == 'true' or ( mode == MODES . GET_SOURCES and kodi . get_setting ( 'auto-play' ) == 'true' ) or mode == MODES . AUTOPLAY :
   oOOoooO ( o0OoO000O , video_type , trakt_id , season , episode )
  else :
   i1ii11 = xbmc . getInfoLabel ( 'Container.PluginName' )
   if kodi . get_setting ( 'source-win' ) == 'Dialog' or i1ii11 == '' :
    ii1i , IIi = oo0OO ( o0OoO000O )
    return IiiI11i1I ( mode , ii1i , IIi , video_type , trakt_id , season , episode )
   else :
    OOo0 ( mode , o0OoO000O , video_type , trakt_id , season , episode )
 finally :
  try : worker_pool . reap_workers ( i1iIi , None )
  except UnboundLocalError : pass
  if 35 - 35: i1IIi - iIii1I11I1II1 + i1IIi
def iiIII1II ( hosters ) :
 OooOOo0 = kodi . get_setting ( 'filter_unusable' ) == 'true'
 ooO000O = kodi . get_setting ( 'show_debrid' ) == 'true'
 if not OooOOo0 and not ooO000O :
  return hosters
  if 53 - 53: OOooOOo . II1i / oO0o
 I11iiIi1i1 = [ i1IiiI1iIi ( ) for i1IiiI1iIi in urlresolver . relevant_resolvers ( order_matters = True ) if i1IiiI1iIi . isUniversal ( ) ]
 oOOo00O0OOOo = [ ]
 i11I1I1iiI = { }
 I1i1iii1Ii = { }
 iIO0O00OOo = { }
 for OoOOo in hosters :
  if 'direct' in OoOOo and OoOOo [ 'direct' ] is False and OoOOo [ 'host' ] :
   iii1 = OoOOo [ 'host' ]
   if OooOOo0 :
    if iii1 in I1i1iii1Ii :
     if 78 - 78: I11iIi1I + iiI1i1 - O0
     I1i1iii1Ii [ iii1 ] += 1
     continue
    elif iii1 in iIO0O00OOo :
     if 10 - 10: o00 % oOooOoO0Oo0O
     iIO0O00OOo [ iii1 ] += 1
     oOOo00O0OOOo . append ( OoOOo )
    else :
     oo0OoOooo = urlresolver . HostedMediaFile ( host = iii1 , media_id = '12345678901' )
     if oo0OoOooo :
      if 95 - 95: o00ooo0 * I11iIi1I % Oo0oO0ooo % oO0o - oO0o
      iIO0O00OOo [ iii1 ] = iIO0O00OOo . get ( iii1 , 0 ) + 1
      oOOo00O0OOOo . append ( OoOOo )
     else :
      if 97 - 97: I11iIi1I + iIii1I11I1II1 . O0
      I1i1iii1Ii [ iii1 ] = I1i1iii1Ii . get ( iii1 , 0 ) + 1
      continue
   else :
    oOOo00O0OOOo . append ( OoOOo )
    if 64 - 64: i1IIi % Oo0oO0ooo / i11iIiiIii - i1IIi % Ii11111i . II1i
   if iii1 in i11I1I1iiI :
    if 8 - 8: o0 + i11i * Ii11111i * ii1IiI1i * iiI1i1 / o00ooo0
    OoOOo [ 'debrid' ] = i11I1I1iiI [ iii1 ]
   else :
    iIii = [ i1IiiI1iIi . name [ : 3 ] . upper ( ) for i1IiiI1iIi in I11iiIi1i1 if i1IiiI1iIi . valid_url ( '' , iii1 ) ]
    if 93 - 93: IiiIII111iI - OOooOOo % ii1IiI1i . ii1IiI1i - Oo0oO0ooo
    i11I1I1iiI [ iii1 ] = iIii
    if iIii :
     OoOOo [ 'debrid' ] = iIii
  else :
   oOOo00O0OOOo . append ( OoOOo )
   if 90 - 90: Oo0oO0ooo + i11i * I11iIi1I / oO0o . OOooOOo + OOooOOo
 o0OO00 . log ( 'Discarded Hosts: %s' % ( sorted ( I1i1iii1Ii . items ( ) , key = lambda o0oo0O : o0oo0O [ 1 ] , reverse = True ) ) , log_utils . LOGDEBUG )
 return oOOo00O0OOOo
 if 40 - 40: Oo0oO0ooo / ii1IiI1i % i11iIiiIii % I11iIi1I / oOooOoO0Oo0O
@ IiII . register ( MODES . RESOLVE_SOURCE , [ 'mode' , 'class_url' , 'direct' , 'video_type' , 'trakt_id' , 'class_name' ] , [ 'season' , 'episode' ] )
@ IiII . register ( MODES . DIRECT_DOWNLOAD , [ 'mode' , 'class_url' , 'direct' , 'video_type' , 'trakt_id' , 'class_name' ] , [ 'season' , 'episode' ] )
def ooOOOOo0 ( mode , class_url , direct , video_type , trakt_id , class_name , season = '' , episode = '' ) :
 for ii in transistortv_utils . relevant_scrapers ( video_type ) :
  if ii . get_name ( ) == class_name :
   IiiIi = ii ( )
   break
 else :
  o0OO00 . log ( 'Unable to locate scraper with name: %s' % ( class_name ) , log_utils . LOGWARNING )
  return False
  if 10 - 10: i1 / o0
 I1iII11iIII1i1I = IiiIi . resolve_link ( class_url )
 if mode == MODES . DIRECT_DOWNLOAD :
  kodi . end_of_directory ( )
 return IiiI11i1I ( mode , I1iII11iIII1i1I , direct , video_type , trakt_id , season , episode )
 if 63 - 63: o0 + o00 - i11i
@ IiII . register ( MODES . PLAY_TRAILER , [ 'stream_url' ] )
def i1iIIi1I1I11 ( stream_url ) :
 xbmc . Player ( ) . play ( stream_url )
 if 39 - 39: iIii1I11I1II1 - OoooooooOO
def oO0oooooo ( language , title , year , season , episode ) :
 o0OO0Oo = SRT_Scraper ( )
 I11iiii1I = o0OO0Oo . get_tvshow_id ( title , year )
 if I11iiii1I is None :
  return
  if 3 - 3: O0 % OoooooooOO / Ii11111i
 ooOo = o0OO0Oo . get_episode_subtitles ( language , I11iiii1I , season , episode )
 o0oO0OoO0 = [ utils2 . format_sub_label ( oOOOOOoOO ) for oOOOOOoOO in ooOo ]
 if 81 - 81: i11i + i11iIiiIii / II1i
 I1IIII1i = 0
 if len ( o0oO0OoO0 ) > 1 and kodi . get_setting ( 'subtitle-autopick' ) == 'false' :
  OOOoo0OO = xbmcgui . Dialog ( )
  I1IIII1i = OOOoo0OO . select ( i18n ( 'choose_subtitle' ) , o0oO0OoO0 )
  if 85 - 85: i11iIiiIii + o00 * ii1IiI1i
 if ooOo and I1IIII1i > - 1 :
  return o0OO0Oo . download_subtitle ( ooOo [ I1IIII1i ] [ 'url' ] )
  if 1 - 1: i1IIi / o0 . i1
def IiiI11i1I ( mode , hoster_url , direct , video_type , trakt_id , season = '' , episode = '' ) :
 if hoster_url is None :
  if direct is not None :
   kodi . notify ( msg = i18n ( 'resolve_failed' ) % ( i18n ( 'no_stream_found' ) ) , duration = 7500 )
  return False
  if 57 - 57: iiI1i1 . o0 + i11i
 with kodi . WorkingDialog ( ) as i111i11I1ii :
  if direct :
   o0OO00 . log ( 'Treating hoster_url as direct: %s' % ( hoster_url ) , log_utils . LOGDEBUG )
   ii1i = hoster_url
  else :
   i111i11I1ii . update ( 25 )
   oo0OoOooo = urlresolver . HostedMediaFile ( url = hoster_url )
   if not oo0OoOooo :
    o0OO00 . log ( 'Indirect hoster_url not supported by urlresolver: %s' % ( hoster_url ) , log_utils . LOGDEBUG )
    ii1i = hoster_url
   else :
    try :
     ii1i = oo0OoOooo . resolve ( )
     if not ii1i or not isinstance ( ii1i , basestring ) :
      try : IiIIiIIIiIii = ii1i . msg
      except : IiIIiIIIiIii = hoster_url
      raise Exception ( IiIIiIIIiIii )
    except Exception as OoO0O00O0oo0O :
     try : IiIIiIIIiIii = str ( OoO0O00O0oo0O )
     except : IiIIiIIIiIii = hoster_url
     kodi . notify ( msg = i18n ( 'resolve_failed' ) % ( IiIIiIIIiIii ) , duration = 7500 )
     return False
  i111i11I1ii . update ( 50 )
  if 64 - 64: IiiIII111iI / i11iIiiIii / OOooOOo . OoooooooOO
 i1iiIIi11I = 0
 oOO0OO0OO = xbmcgui . Window ( 10000 ) . getProperty ( 'PseudoTVRunning' ) . lower ( )
 if oOO0OO0OO != 'true' and mode not in [ MODES . DOWNLOAD_SOURCE , MODES . DIRECT_DOWNLOAD ] :
  if transistortv_utils . bookmark_exists ( trakt_id , season , episode ) :
   if transistortv_utils . get_resume_choice ( trakt_id , season , episode ) :
    i1iiIIi11I = transistortv_utils . get_bookmark ( trakt_id , season , episode )
    o0OO00 . log ( 'Resume Point: %s' % ( i1iiIIi11I ) , log_utils . LOGDEBUG )
    if 80 - 80: Oo0oO0ooo * O0
 with kodi . WorkingDialog ( ) as i111i11I1ii :
  oo000o0 = xbmc . getInfoLabel ( 'Container.PluginName' ) == ''
  i111i11I1ii . update ( 50 )
  I1iI1I1 = xbmcgui . Window ( 10000 )
  I1iI1I1 . setProperty ( 'transistortv.playing' , 'True' )
  I1iI1I1 . setProperty ( 'transistortv.playing.trakt_id' , str ( trakt_id ) )
  I1iI1I1 . setProperty ( 'transistortv.playing.season' , str ( season ) )
  I1iI1I1 . setProperty ( 'transistortv.playing.episode' , str ( episode ) )
  I1iI1I1 . setProperty ( 'transistortv.playing.library' , str ( oo000o0 ) )
  if i1iiIIi11I > 0 :
   if kodi . get_setting ( 'trakt_bookmark' ) == 'true' :
    I1iI1I1 . setProperty ( 'transistortv.playing.trakt_resume' , str ( i1iiIIi11I ) )
   else :
    I1iI1I1 . setProperty ( 'transistortv.playing.transistortv_resume' , str ( i1iiIIi11I ) )
    if 48 - 48: oOooOoO0Oo0O / i11iIiiIii - OOooOOo * IiiIII111iI / OoooooooOO
  OoOo = { 'thumb' : '' , 'fanart' : '' }
  IiOOo00 = { }
  i1i = { }
  try :
   if video_type == VIDEO_TYPES . EPISODE :
    iI1ii1Ii = kodi . get_setting ( 'tv-download-folder' )
    IIIiiiI = utils2 . filename_from_title ( trakt_id , VIDEO_TYPES . TVSHOW )
    IIIiiiI = IIIiiiI % ( '%02d' % int ( season ) , '%02d' % int ( episode ) )
    if 94 - 94: O0 - iiI1i1 - iIii1I11I1II1 % Oo0oO0ooo / oO0o % II1i
    iIi1IIi1ii = Oo . get_episode_details ( trakt_id , season , episode )
    i1i = Oo . get_show_details ( trakt_id )
    I1iI1I1 . setProperty ( 'script.trakt.ids' , json . dumps ( i1i [ 'ids' ] ) )
    I11Ii = Oo . get_people ( SECTIONS . TV , trakt_id ) if kodi . get_setting ( 'include_people' ) == 'true' else None
    IiOOo00 = transistortv_utils . make_info ( iIi1IIi1ii , i1i , I11Ii )
    OoOo = image_scraper . get_images ( VIDEO_TYPES . EPISODE , i1i [ 'ids' ] , season , episode )
    if 16 - 16: o0 / i11iIiiIii
    iI1ii1Ii = oo00 ( iI1ii1Ii , VIDEO_TYPES . TVSHOW , i1i [ 'title' ] , season = season )
    IIIiiiI = utils2 . filename_from_title ( i1i [ 'title' ] , VIDEO_TYPES . TVSHOW )
    IIIiiiI = IIIiiiI % ( '%02d' % int ( season ) , '%02d' % int ( episode ) )
   else :
    iI1ii1Ii = kodi . get_setting ( 'movie-download-folder' )
    IIIiiiI = utils2 . filename_from_title ( trakt_id , video_type )
    if 24 - 24: OOooOOo - OOooOOo + I11iIi1I + oOooOoO0Oo0O - IiiIII111iI
    I1IIiI = Oo . get_movie_details ( trakt_id )
    I1iI1I1 . setProperty ( 'script.trakt.ids' , json . dumps ( I1IIiI [ 'ids' ] ) )
    I11Ii = Oo . get_people ( SECTIONS . MOVIES , trakt_id ) if kodi . get_setting ( 'include_people' ) == 'true' else None
    IiOOo00 = transistortv_utils . make_info ( I1IIiI , people = I11Ii )
    OoOo = image_scraper . get_images ( VIDEO_TYPES . MOVIE , I1IIiI [ 'ids' ] )
    if 84 - 84: iiI1i1 - o0 / O0 - o00
    iI1ii1Ii = oo00 ( iI1ii1Ii , video_type , I1IIiI [ 'title' ] , I1IIiI [ 'year' ] )
    IIIiiiI = utils2 . filename_from_title ( I1IIiI [ 'title' ] , video_type , I1IIiI [ 'year' ] )
  except TransientTraktError as OoO0O00O0oo0O :
   o0OO00 . log ( 'During Playback: %s' % ( str ( OoO0O00O0oo0O ) ) , log_utils . LOGWARNING )
  i111i11I1ii . update ( 75 )
  if 21 - 21: O0 * O0 % I11iIi1I
 if mode in [ MODES . DOWNLOAD_SOURCE , MODES . DIRECT_DOWNLOAD ] :
  utils . download_media ( ii1i , iI1ii1Ii , IIIiiiI , kodi . Translations ( strings . STRINGS ) )
  return True
  if 94 - 94: iiI1i1 + i11i % i11iIiiIii
 with kodi . WorkingDialog ( ) as i111i11I1ii :
  i111i11I1ii . update ( 75 )
  if video_type == VIDEO_TYPES . EPISODE and utils2 . srt_download_enabled ( ) and i1i :
   i1i1IiIiIi1Ii = oO0oooooo ( kodi . get_setting ( 'subtitle-lang' ) , i1i [ 'title' ] , i1i [ 'year' ] , season , episode )
   if utils2 . srt_show_enabled ( ) and i1i1IiIiIi1Ii :
    o0OO00 . log ( 'Setting srt path: %s' % ( i1i1IiIiIi1Ii ) , log_utils . LOGDEBUG )
    I1iI1I1 . setProperty ( 'transistortv.playing.srt' , i1i1IiIiIi1Ii )
    if 64 - 64: Ii11111i + OoooooooOO * OoooooooOO
  i1I = xbmcgui . ListItem ( path = ii1i , iconImage = OoOo [ 'thumb' ] , thumbnailImage = OoOo [ 'thumb' ] )
  i1I . setProperty ( 'fanart_image' , OoOo [ 'fanart' ] )
  try : i1I . setArt ( OoOo )
  except : pass
  i1I . setPath ( ii1i )
  i1I . setInfo ( 'video' , IiOOo00 )
  i111i11I1ii . update ( 100 )
  if 36 - 36: oOooOoO0Oo0O * o0
 if mode == MODES . RESOLVE_SOURCE or oo000o0 or utils2 . from_playlist ( ) :
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , i1I )
 else :
  xbmc . Player ( ) . play ( ii1i , i1I )
 return True
 if 77 - 77: IiiIII111iI % i1IIi - oO0o
def oOOoooO ( hosters , video_type , trakt_id , season , episode ) :
 oOO00OO0ooo0o = len ( hosters )
 IIiiii = False if kodi . get_setting ( 'pd_force_disable' ) == 'true' else True
 with kodi . ProgressDialog ( i18n ( 'trying_autoplay' ) , active = IIiiii ) as iII1iii :
  OOO0o = ''
  for o00o0 , oOOOoo00 in enumerate ( hosters ) :
   if oOOOoo00 [ 'multi-part' ] :
    continue
    if 4 - 4: o0 . i1IIi - II1i
   OoO00 = o00o0 * 100 / oOO00OO0ooo0o
   i111i11I1Ii1I = i18n ( 'trying_source' ) % ( oOOOoo00 [ 'quality' ] , oOOOoo00 [ 'host' ] , oOOOoo00 [ 'class' ] . get_name ( ) )
   iII1iii . update ( OoO00 , i111i11I1Ii1I , OOO0o )
   if iII1iii . is_canceled ( ) : return False
   I1iII11iIII1i1I = oOOOoo00 [ 'class' ] . resolve_link ( oOOOoo00 [ 'url' ] )
   o0OO00 . log ( 'Auto Playing: %s' % ( I1iII11iIII1i1I ) , log_utils . LOGDEBUG )
   if IiiI11i1I ( MODES . GET_SOURCES , I1iII11iIII1i1I , oOOOoo00 [ 'direct' ] , video_type , trakt_id , season , episode ) :
    return True
   if iII1iii . is_canceled ( ) : return False
   OOO0o = i18n ( 'failed_source' ) % ( oOOOoo00 [ 'quality' ] , oOOOoo00 [ 'host' ] , oOOOoo00 [ 'class' ] . get_name ( ) )
  else :
   IiIIiIIIiIii = i18n ( 'all_sources_failed' )
   o0OO00 . log ( IiIIiIIIiIii , log_utils . LOGERROR )
   kodi . notify ( msg = IiIIiIIIiIii , duration = 5000 )
   if 8 - 8: oO0o
def oo0OO ( hosters ) :
 for oOOOoo00 in hosters :
  if oOOOoo00 [ 'multi-part' ] :
   continue
  oOOOoo00 [ 'label' ] = utils2 . format_source_label ( oOOOoo00 )
  if 35 - 35: o00ooo0 + i1IIi * IiiIII111iI - oO0o . o0
 OOOoo0OO = xbmcgui . Dialog ( )
 I1IIII1i = OOOoo0OO . select ( i18n ( 'choose_stream' ) , [ oOOOoo00 [ 'label' ] for oOOOoo00 in hosters if 'label' in oOOOoo00 ] )
 if I1IIII1i > - 1 :
  try :
   OoOOo = hosters [ I1IIII1i ]
   if OoOOo [ 'url' ] :
    I1iII11iIII1i1I = OoOOo [ 'class' ] . resolve_link ( OoOOo [ 'url' ] )
    o0OO00 . log ( 'Attempting to play url: %s as direct: %s from: %s' % ( I1iII11iIII1i1I , OoOOo [ 'direct' ] , OoOOo [ 'class' ] . get_name ( ) ) , log_utils . LOGNOTICE )
    return I1iII11iIII1i1I , OoOOo [ 'direct' ]
  except Exception as OoO0O00O0oo0O :
   o0OO00 . log ( 'Error (%s) while trying to resolve %s' % ( str ( OoO0O00O0oo0O ) , OoOOo [ 'url' ] ) , log_utils . LOGERROR )
   if 31 - 31: OOooOOo
 return None , None
 if 15 - 15: O0 / o0 % I11iIi1I + OOooOOo
def OOo0 ( prev_mode , hosters , video_type , trakt_id , season , episode ) :
 db_connection . cache_sources ( hosters )
 ii1I = { 'mode' : MODES . BUILD_SOURCE_DIR , 'prev_mode' : prev_mode , 'video_type' : video_type , 'trakt_id' : trakt_id , 'season' : season , 'episode' : episode }
 oO0Ooo0ooOO0 = kodi . get_plugin_url ( ii1I )
 kodi . update_container ( oO0Ooo0ooOO0 )
 if 23 - 23: iIii1I11I1II1 + O0
@ IiII . register ( MODES . BUILD_SOURCE_DIR , [ 'prev_mode' , 'video_type' , 'trakt_id' ] , [ 'season' , 'episode' ] )
def ooO0oo ( prev_mode , video_type , trakt_id , season = '' , episode = '' ) :
 if prev_mode == MODES . DOWNLOAD_SOURCE :
  ooO0oo0o0 = MODES . DIRECT_DOWNLOAD
  IIiIii1 = False
 else :
  ooO0oo0o0 = MODES . RESOLVE_SOURCE
  IIiIii1 = True
  if 62 - 62: iIii1I11I1II1 + II1i . o0 / o00ooo0 % O0 . o00
 iiIi1IIi1I = transistortv_utils . relevant_scrapers ( video_type , as_dict = True )
 o0OoO000O = db_connection . get_cached_sources ( )
 Oo0oOooOoOo = len ( o0OoO000O )
 for oOOOoo00 in o0OoO000O :
  if oOOOoo00 [ 'name' ] in iiIi1IIi1I :
   oOOOoo00 [ 'class' ] = iiIi1IIi1I [ oOOOoo00 [ 'name' ] ] ( )
  else :
   o0OO00 . log ( 'Skipping hoster with unknown name: %s' % ( oOOOoo00 ) )
   continue
   if 49 - 49: Ii11111i . I11iIi1I . i11iIiiIii - i11i / oO0o
  if oOOOoo00 [ 'multi-part' ] :
   continue
   if 62 - 62: Ii11111i
  II11iiii1Ii = [ ]
  oOOOoo00 [ 'label' ] = utils2 . format_source_label ( oOOOoo00 )
  ii1I = { 'mode' : MODES . SET_VIEW , 'content_type' : CONTENT_TYPES . FILES }
  II11iiii1Ii . append ( ( i18n ( 'set_as_sources_view' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if ooO0oo0o0 == MODES . RESOLVE_SOURCE :
   ii1I = { 'mode' : MODES . DIRECT_DOWNLOAD , 'class_url' : oOOOoo00 [ 'url' ] , 'direct' : oOOOoo00 [ 'direct' ] , 'video_type' : video_type , 'trakt_id' : trakt_id ,
 'season' : season , 'episode' : episode , 'class_name' : oOOOoo00 [ 'class' ] . get_name ( ) }
   II11iiii1Ii . append ( ( i18n ( 'download_source' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
   if 1 - 1: o00ooo0 / o00ooo0 - i11iIiiIii
  ii1I = { 'mode' : ooO0oo0o0 , 'class_url' : oOOOoo00 [ 'url' ] , 'direct' : oOOOoo00 [ 'direct' ] , 'video_type' : video_type , 'trakt_id' : trakt_id ,
 'season' : season , 'episode' : episode , 'class_name' : oOOOoo00 [ 'class' ] . get_name ( ) }
  kodi . create_item ( ii1I , utils2 . cleanse_title ( oOOOoo00 [ 'label' ] ) , is_folder = False , is_playable = IIiIii1 , total_items = Oo0oOooOoOo , menu_items = II11iiii1Ii )
 kodi . set_view ( CONTENT_TYPES . FILES , True )
 kodi . end_of_directory ( )
 if 87 - 87: o0 / O0 * o00ooo0 / OOooOOo
@ IiII . register ( MODES . SET_URL_MANUAL , [ 'mode' , 'video_type' , 'title' , 'year' , 'trakt_id' ] , [ 'season' , 'episode' , 'ep_title' , 'ep_airdate' ] )
@ IiII . register ( MODES . SET_URL_SEARCH , [ 'mode' , 'video_type' , 'title' , 'year' , 'trakt_id' ] , [ 'season' , 'episode' , 'ep_title' , 'ep_airdate' ] )
def I1iiIII ( mode , video_type , title , year , trakt_id , season = '' , episode = '' , ep_title = '' , ep_airdate = '' ) :
 try :
  IiiIIIII1iii = ScraperVideo ( video_type , title , year , trakt_id , season , episode , ep_title , ep_airdate )
  i1iIi , iIi1I1 = O0oOoo0OoO0O ( IiiIIIII1iii )
  while True :
   OOOoo0OO = xbmcgui . Dialog ( )
   if mode == MODES . SET_URL_SEARCH :
    oo00IiI1 = [ ( '***%s' % ( i18n ( 'manual_search_all' ) ) ) ]
    oOo00o00oO = 2
   else :
    oOo00o00oO = 1
    oo00IiI1 = [ ]
   oo00IiI1 += [ '***%s' % ( i18n ( 'rescrape_all' ) ) ]
   oo00IiI1 += [ o0000 [ 'label' ] for o0000 in iIi1I1 ]
   if 42 - 42: o00 + o00 * i11i
   I1IIII1i = OOOoo0OO . select ( i18n ( 'url_to_change' ) % ( video_type ) , oo00IiI1 )
   if I1IIII1i == 0 :
    if mode == MODES . SET_URL_SEARCH :
     iIi1I1 = o0Oo ( IiiIIIII1iii , iIi1I1 )
    else :
     iIi1I1 = o0O0 ( IiiIIIII1iii , iIi1I1 )
   elif I1IIII1i == 1 and mode == MODES . SET_URL_SEARCH :
    iIi1I1 = o0O0 ( IiiIIIII1iii , iIi1I1 )
   elif I1IIII1i > oOo00o00oO - 1 :
    I1IIII1i = I1IIII1i - oOo00o00oO
    if mode == MODES . SET_URL_MANUAL :
     o0000 = iIi1I1 [ I1IIII1i ]
     ii1iii1I1I = i18n ( 'rel_url_at' ) % ( video_type , o0000 [ 'name' ] )
     I1I1Iiii1 = kodi . get_keyboard ( ii1iii1I1I , o0000 [ 'url' ] )
     if I1I1Iiii1 is not None :
      transistortv_utils . update_url ( IiiIIIII1iii , o0000 [ 'name' ] , o0000 [ 'url' ] , I1I1Iiii1 )
      kodi . notify ( msg = i18n ( 'rel_url_set' ) % ( o0000 [ 'name' ] ) , duration = 5000 )
      o0000 [ 'label' ] = '[%s] %s' % ( o0000 [ 'name' ] , I1I1Iiii1 )
    elif mode == MODES . SET_URL_SEARCH :
     i111i1 ( IiiIIIII1iii , iIi1I1 [ I1IIII1i ] )
   else :
    break
 finally :
  try : worker_pool . reap_workers ( i1iIi , None )
  except UnboundLocalError : pass
  if 99 - 99: oOooOoO0Oo0O + i1IIi + i11iIiiIii + o0 % IiiIII111iI / iiI1i1
def o0Oo ( video , related_list ) :
 O0OO0o0OO0OO = [ o0000 for o0000 in related_list if not o0000 [ 'url' ] ]
 if not O0OO0o0OO0OO : return related_list
 if 64 - 64: i11i
 iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 = i1IIi1i1Ii1 ( video . video_type , video . title , video . year , video . season )
 iiOO0O0Ooo = oOoO0 = int ( kodi . get_setting ( 'source_timeout' ) )
 if oOoO0 == 0 : iiOO0O0Ooo = None
 iIIiIiI1I1 = time . time ( )
 with kodi . ProgressDialog ( i18n ( 'set_related_url' ) , utils2 . make_progress_msg ( video ) ) as iII1iii :
  try :
   Oo0 = worker_pool . WorkerPool ( )
   O00OO = len ( O0OO0o0OO0OO )
   for o00o0 , o0000 in enumerate ( O0OO0o0OO0OO ) :
    o0OO00 . log ( 'Searching for: |%s|%s|%s|%s|' % ( o0000 [ 'name' ] , iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 ) , log_utils . LOGDEBUG )
    Oo0 . request ( transistortv_utils . parallel_search , [ o0000 [ 'class' ] , video . video_type , iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 ] )
    I1ii1 = o00o0 * 50 / O00OO
    iII1iii . update ( I1ii1 , line2 = i18n ( 'req_result' ) % ( o0000 [ 'name' ] ) )
    if 45 - 45: iIii1I11I1II1 . IiiIII111iI / ii1IiI1i / o00ooo0
   I1111I1II11 = set ( [ oOOOoo00 [ 'name' ] for oOOOoo00 in O0OO0o0OO0OO ] )
   OOo = 0
   while OOo < O00OO :
    try :
     o0OO00 . log ( 'Waiting for Urls - Timeout: %s' % ( iiOO0O0Ooo ) , log_utils . LOGDEBUG )
     o0O0O0 = Oo0 . receive ( iiOO0O0Ooo )
     I1111I1II11 . remove ( o0O0O0 [ 'name' ] )
     OOo += 1
     o0OO00 . log ( 'Got result: %s' % ( o0O0O0 ) , log_utils . LOGDEBUG )
     if o0O0O0 [ 'results' ] :
      for o00o0 , oOOOoo00 in enumerate ( related_list ) :
       if oOOOoo00 [ 'name' ] == o0O0O0 [ 'name' ] :
        ooOOOoOoOOO0 = o0O0O0 [ 'results' ] [ 0 ]
        transistortv_utils . update_url ( video , oOOOoo00 [ 'name' ] , oOOOoo00 [ 'url' ] , ooOOOoOoOOO0 [ 'url' ] )
        oOOOoo00 [ 'url' ] = ooOOOoOoOOO0 [ 'url' ]
        oOOOoo00 [ 'label' ] = '[%s] %s' % ( oOOOoo00 [ 'name' ] , ooOOOoOoOOO0 [ 'url' ] )
        if 5 - 5: Ii11111i
     I1ii1 = ( OOo * 50 / O00OO ) + 50
     if len ( I1111I1II11 ) > 5 :
      iIIIIIiI1I1 = i18n ( 'remaining_over' ) % ( len ( I1111I1II11 ) , O00OO )
     else :
      iIIIIIiI1I1 = i18n ( 'remaining_under' ) % ( ', ' . join ( I1111I1II11 ) )
     iII1iii . update ( I1ii1 , line2 = i18n ( 'recv_result' ) % ( o0O0O0 [ 'name' ] ) , line3 = iIIIIIiI1I1 )
     if 4 - 4: II1i % o00 / i1 . Ii11111i / Ii11111i - I11iIi1I
     if oOoO0 > 0 :
      iiOO0O0Ooo = oOoO0 - ( time . time ( ) - iIIiIiI1I1 )
      if iiOO0O0Ooo < 0 : iiOO0O0Ooo = 0
    except worker_pool . Empty :
     o0OO00 . log ( 'Get Url Timeout' , log_utils . LOGWARNING )
     break
   else :
    o0OO00 . log ( 'All source results received' , log_utils . LOGDEBUG )
  finally :
   i1iIi = Oo0 . close ( )
   if 79 - 79: I11iIi1I + o00
 transistortv_utils . record_sru_failures ( I1111I1II11 , O00OO , related_list )
 worker_pool . reap_workers ( i1iIi , None )
 return related_list
 if 10 - 10: o0 + O0
def o0O0 ( video , related_list ) :
 for o0000 in related_list :
  transistortv_utils . update_url ( video , o0000 [ 'name' ] , o0000 [ 'url' ] , '' )
  if 43 - 43: iIii1I11I1II1 / i11i % OOooOOo - Ii11111i
 try :
  i1iIi , related_list = O0oOoo0OoO0O ( video )
  return related_list
 finally :
  try : worker_pool . reap_workers ( i1iIi , None )
  except UnboundLocalError : pass
  if 62 - 62: iiI1i1
def O0oOoo0OoO0O ( video ) :
 iiOO0O0Ooo = oOoO0 = int ( kodi . get_setting ( 'source_timeout' ) )
 if oOoO0 == 0 : iiOO0O0Ooo = None
 iIIiIiI1I1 = time . time ( )
 with kodi . ProgressDialog ( i18n ( 'set_related_url' ) , utils2 . make_progress_msg ( video ) ) as iII1iii :
  try :
   Oo0 = worker_pool . WorkerPool ( )
   iiIi1IIi1I = transistortv_utils . relevant_scrapers ( video . video_type , order_matters = True )
   iIi1I1 = [ ]
   O00OO = len ( iiIi1IIi1I )
   for o00o0 , ii in enumerate ( iiIi1IIi1I ) :
    oO0O00oOOoooO = ii ( oOoO0 )
    Oo0 . request ( transistortv_utils . parallel_get_url , [ oO0O00oOOoooO , video ] )
    iIi1I1 . append ( { 'class' : oO0O00oOOoooO , 'url' : '' , 'name' : ii . get_name ( ) , 'label' : '[%s]' % ( ii . get_name ( ) ) } )
    I1ii1 = o00o0 * 50 / O00OO
    iII1iii . update ( I1ii1 , line2 = i18n ( 'req_result' ) % ( ii . get_name ( ) ) )
    if 63 - 63: Ii11111i + Oo0oO0ooo * IiiIII111iI / OOooOOo / o0 * iIii1I11I1II1
   I1111I1II11 = set ( [ oOOOoo00 [ 'name' ] for oOOOoo00 in iIi1I1 ] )
   OOo = 0
   while OOo < O00OO :
    try :
     o0OO00 . log ( 'Waiting for Urls - Timeout: %s' % ( iiOO0O0Ooo ) , log_utils . LOGDEBUG )
     O00O0ooo0 = Oo0 . receive ( iiOO0O0Ooo )
     OOo += 1
     o0OO00 . log ( 'Got result: %s' % ( O00O0ooo0 ) , log_utils . LOGDEBUG )
     for o00o0 , oOOOoo00 in enumerate ( iIi1I1 ) :
      if oOOOoo00 [ 'name' ] == O00O0ooo0 [ 'name' ] :
       iIi1I1 [ o00o0 ] = O00O0ooo0
       I1111I1II11 . remove ( O00O0ooo0 [ 'name' ] )
     I1ii1 = ( OOo * 50 / O00OO ) + 50
     if len ( I1111I1II11 ) > 5 :
      iIIIIIiI1I1 = i18n ( 'remaining_over' ) % ( len ( I1111I1II11 ) , O00OO )
     else :
      iIIIIIiI1I1 = i18n ( 'remaining_under' ) % ( ', ' . join ( I1111I1II11 ) )
     iII1iii . update ( I1ii1 , line2 = i18n ( 'recv_result' ) % ( O00O0ooo0 [ 'name' ] ) , line3 = iIIIIIiI1I1 )
     if 57 - 57: ii1IiI1i - IiiIII111iI / Oo0oO0ooo % i11iIiiIii
     if oOoO0 > 0 :
      iiOO0O0Ooo = oOoO0 - ( time . time ( ) - iIIiIiI1I1 )
      if iiOO0O0Ooo < 0 : iiOO0O0Ooo = 0
    except worker_pool . Empty :
     o0OO00 . log ( 'Get Url Timeout' , log_utils . LOGWARNING )
     break
   else :
    o0OO00 . log ( 'All source results received' , log_utils . LOGDEBUG )
    if 3 - 3: II1i . Oo0oO0ooo % oOooOoO0Oo0O + I11iIi1I
  finally :
   i1iIi = Oo0 . close ( )
   if 64 - 64: i1IIi
 transistortv_utils . record_sru_failures ( I1111I1II11 , O00OO , iIi1I1 )
 return i1iIi , iIi1I1
 if 29 - 29: OOooOOo / i11iIiiIii / oOooOoO0Oo0O % IiiIII111iI % i11iIiiIii
def i111i1 ( video , related ) :
 iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 = video . title , video . year , video . season
 while True :
  OOOoo0OO = xbmcgui . Dialog ( )
  i111II = [ i18n ( 'manual_search' ) , '[COLOR green]%s[/COLOR]' % ( i18n ( 'force_no_match' ) ) ]
  try :
   o0OO00 . log ( 'Searching for: |%s|%s|%s|' % ( iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 ) , log_utils . LOGDEBUG )
   o0O0O0 = related [ 'class' ] . search ( video . video_type , iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 )
   i111II += [ '%s (%s)' % ( O00O0ooo0 [ 'title' ] , O00O0ooo0 [ 'year' ] ) if O00O0ooo0 [ 'year' ] else O00O0ooo0 [ 'title' ] for O00O0ooo0 in o0O0O0 ]
   OO0O00o0 = OOOoo0OO . select ( i18n ( 'select_related' ) , i111II )
   if OO0O00o0 == 0 :
    iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 = i1IIi1i1Ii1 ( video . video_type , iIIIiIi1I1i , OoOOoO0oOo , O0ooOOOO0O0 )
   elif OO0O00o0 >= 1 :
    if OO0O00o0 == 1 :
     transistortv_utils . update_url ( video , related [ 'name' ] , related [ 'url' ] , FORCE_NO_MATCH )
     related [ 'label' ] = '[%s] [COLOR green]%s[/COLOR]' % ( related [ 'name' ] , i18n ( 'force_no_match' ) )
    else :
     transistortv_utils . update_url ( video , related [ 'name' ] , related [ 'url' ] , o0O0O0 [ OO0O00o0 - 2 ] [ 'url' ] )
     related [ 'label' ] = '[%s] %s' % ( related [ 'name' ] , o0O0O0 [ OO0O00o0 - 2 ] [ 'url' ] )
    kodi . notify ( msg = i18n ( 'rel_url_set' ) % ( related [ 'name' ] ) , duration = 5000 )
    break
   else :
    break
  except NotImplementedError :
   o0OO00 . log ( '%s Scraper does not support searching.' % ( related [ 'class' ] . get_name ( ) ) , log_utils . LOGDEBUG )
   kodi . notify ( msg = i18n ( 'scraper_no_search' ) , duration = 5000 )
   break
   if 32 - 32: Ii11111i / o00ooo0 % Oo0oO0ooo + i11i
def i1IIi1i1Ii1 ( video_type , search_title , search_year , search_season ) :
 I1III111i = search_title
 if search_year : I1III111i = '%s (%s)' % ( I1III111i , search_year )
 if video_type == VIDEO_TYPES . SEASON and search_season :
  I1III111i += ' Season %s' % ( search_season )
 ii1Ii1IiIIi = kodi . get_keyboard ( i18n ( 'enter_search' ) , I1III111i )
 if ii1Ii1IiIIi is not None :
  iiI1iii = re . match ( '(.*?)\(?(\d{4})\)?' , ii1Ii1IiIIi )
  if iiI1iii :
   search_title , search_year = iiI1iii . groups ( )
   search_title = search_title . strip ( )
  else :
   search_title = ii1Ii1IiIIi
   search_year = ''
   if 79 - 79: i1 * ii1IiI1i . OoooooooOO - iiI1i1 * OOooOOo
  iiI1iii = re . search ( 'Season\s+(\d+)' , ii1Ii1IiIIi )
  try : search_season = iiI1iii . group ( 1 )
  except : search_season = ''
 return search_title , search_year , search_season
 if 78 - 78: o00ooo0
@ IiII . register ( MODES . RATE , [ 'section' , 'id_type' , 'show_id' ] , [ 'season' , 'episode' ] )
def Oo0O0Oo00O ( section , id_type , show_id , season = '' , episode = '' ) :
 if 9 - 9: OOooOOo . oOooOoO0Oo0O - I11iIi1I
 if id_type == 'imdb' and xbmc . getCondVisibility ( 'System.HasAddon(script.trakt)' ) :
  IiiiI = 'RunScript(script.trakt, action=rate, media_type=%s, remoteid=%s'
  if section == SECTIONS . MOVIES :
   IiiiI = ( IiiiI + ')' ) % ( 'movie' , show_id )
  else :
   if season and episode :
    IiiiI = ( IiiiI + ', season=%s, episode=%s)' ) % ( 'episode' , show_id , season , episode )
   elif season :
    IiiiI = ( IiiiI + ', season=%s)' ) % ( 'season' , show_id , season )
   else :
    IiiiI = ( IiiiI + ')' ) % ( 'show' , show_id )
  xbmc . executebuiltin ( IiiiI )
 else :
  oOOOoo00 = { id_type : show_id }
  while True :
   iiIIi = kodi . get_keyboard ( i18n ( 'enter_rating' ) )
   if iiIIi is not None :
    iiIIi = iiIIi . lower ( )
    if iiIIi in [ 'unrate' ] + [ str ( o00o0 ) for o00o0 in range ( 1 , 11 ) ] :
     break
   else :
    return
    if 36 - 36: iiI1i1 . i11i
  if iiIIi == 'unrate' : iiIIi = None
  Oo . rate ( section , oOOOoo00 , iiIIi , season , episode )
  if 25 - 25: IiiIII111iI
@ IiII . register ( MODES . EDIT_TVSHOW_ID , [ 'title' ] , [ 'year' ] )
def iI1iiII11I ( title , year = '' ) :
 I11iiii1I = SRT_Scraper ( ) . get_tvshow_id ( title , year )
 I1I11Ii11I = kodi . get_keyboard ( i18n ( 'input_tvshow_id' ) , I11iiii1I )
 if I1I11Ii11I is not None :
  db_connection . set_related_url ( VIDEO_TYPES . TVSHOW , title , year , SRT_SOURCE , I1I11Ii11I )
  if 46 - 46: ii1IiI1i % i1IIi / IiiIII111iI * o0 * Ii11111i
@ IiII . register ( MODES . REM_FROM_LIST , [ 'slug' , 'section' , 'id_type' , 'show_id' ] )
def OOoOOOo0Ooo0 ( slug , section , id_type , show_id ) :
 oOOOoo00 = { 'type' : TRAKT_SECTIONS [ section ] [ : - 1 ] , id_type : show_id }
 o0OOOOO0O ( section , oOOOoo00 , slug )
 kodi . refresh_container ( )
 if 35 - 35: oO0o - oO0o + i1IIi - O0 - o00
def o0OOOOO0O ( section , items , slug ) :
 if slug == utils . WATCHLIST_SLUG :
  oOO0o0oo0 = Oo . remove_from_watchlist ( section , items )
 else :
  oOO0o0oo0 = Oo . remove_from_list ( section , slug , items )
 return oOO0o0oo0
 if 78 - 78: Ii11111i + II1i . o00ooo0
@ IiII . register ( MODES . ADD_TO_COLL , [ 'mode' , 'section' , 'id_type' , 'show_id' ] )
@ IiII . register ( MODES . REM_FROM_COLL , [ 'mode' , 'section' , 'id_type' , 'show_id' ] )
def OoIIi1iI ( mode , section , id_type , show_id ) :
 oOOOoo00 = { id_type : show_id }
 if mode == MODES . ADD_TO_COLL :
  Oo . add_to_collection ( section , oOOOoo00 )
  IiIIiIIIiIii = i18n ( 'item_to_collection' )
 else :
  Oo . remove_from_collection ( section , oOOOoo00 )
  IiIIiIIIiIii = i18n ( 'item_from_collection' )
 kodi . notify ( msg = IiIIiIIIiIii )
 kodi . refresh_container ( )
 if 92 - 92: i1 * Oo0oO0ooo
@ IiII . register ( MODES . ADD_TO_LIST , [ 'section' , 'id_type' , 'show_id' ] , [ 'slug' ] )
def i1iIIi1o0o0OoOOOOOo ( section , id_type , show_id , slug = None ) :
 oOO0o0oo0 = Ii11iii1II1i ( section , { id_type : show_id } , slug )
 if oOO0o0oo0 is not None :
  kodi . notify ( msg = i18n ( 'item_to_list' ) )
  if 65 - 65: oO0o + i1 - OoooooooOO
def Ii11iii1II1i ( section , items , slug = None ) :
 if not slug :
  O00O0ooo0 = utils . choose_list ( Trakt_API , kodi . Translations ( strings . STRINGS ) )
  if O00O0ooo0 :
   slug , OOOooo = O00O0ooo0
   if 51 - 51: o0 + IiiIII111iI / II1i - i1IIi
 if slug == utils . WATCHLIST_SLUG :
  oOO0o0oo0 = Oo . add_to_watchlist ( section , items )
 elif slug :
  oOO0o0oo0 = Oo . add_to_list ( section , slug , items )
 else :
  oOO0o0oo0 = None
 return oOO0o0oo0
 if 51 - 51: o0 - I11iIi1I * iiI1i1
@ IiII . register ( MODES . COPY_LIST , [ 'section' , 'slug' ] , [ 'username' , 'target_slug' ] )
def ii1111Ii1i ( section , slug , username = None , target_slug = None ) :
 if slug == COLLECTION_SLUG :
  IiI111111IIII = Oo . get_collection ( section )
 else :
  IiI111111IIII = Oo . show_list ( slug , section , username )
 IiI1iiI1III1I = [ ]
 for oOOOoo00 in IiI111111IIII :
  I1iiii1I = utils2 . show_id ( oOOOoo00 )
  Oo000 = { 'type' : TRAKT_SECTIONS [ section ] [ : - 1 ] , I1iiii1I [ 'id_type' ] : I1iiii1I [ 'show_id' ] }
  IiI1iiI1III1I . append ( Oo000 )
 oOO0o0oo0 = Ii11iii1II1i ( section , IiI1iiI1III1I , target_slug )
 if oOO0o0oo0 :
  ooo00Oo = sum ( oOO0o0oo0 [ 'added' ] . values ( ) )
  Iiii1iiiIiI1 = sum ( oOO0o0oo0 [ 'existing' ] . values ( ) )
  I11Iii1 = sum ( [ len ( oOOOoo00 ) for oOOOoo00 in oOO0o0oo0 [ 'not_found' ] . values ( ) ] )
  kodi . notify ( msg = i18n ( 'list_copied' ) % ( ooo00Oo , Iiii1iiiIiI1 , I11Iii1 ) , duration = 5000 )
  if 16 - 16: oO0o * i1 / IiiIII111iI
@ IiII . register ( MODES . TOGGLE_TITLE , [ 'trakt_id' ] )
def II1iiI ( trakt_id ) :
 trakt_id = str ( trakt_id )
 Ii = utils2 . get_force_title_list ( )
 if trakt_id in Ii :
  del Ii [ Ii . index ( trakt_id ) ]
 else :
  Ii . append ( trakt_id )
 III1Ii1i1I1 = '|' . join ( Ii )
 kodi . set_setting ( 'force_title_match' , III1Ii1i1I1 )
 kodi . refresh_container ( )
 if 97 - 97: o00 . Oo0oO0ooo - o00 + oOooOoO0Oo0O * i11i
@ IiII . register ( MODES . MANAGE_PROGRESS , [ 'action' , 'trakt_id' ] )
def iiiI1I1iIIIi1 ( action , trakt_id ) :
 trakt_id = str ( trakt_id )
 Ii = utils2 . get_progress_skip_list ( )
 iII1111III1I = utils2 . get_force_progress_list ( )
 I111Ii = trakt_id in Ii
 II11 = trakt_id in iII1111III1I
 if 2 - 2: iIii1I11I1II1
 if action == ACTIONS . REMOVE and I111Ii :
  del Ii [ Ii . index ( trakt_id ) ]
  iII1111III1I . append ( trakt_id )
 elif action == ACTIONS . ADD and not I111Ii and not II11 :
  Ii . append ( trakt_id )
  if 45 - 45: OoooooooOO / i11iIiiIii
 III1Ii1i1I1 = '|' . join ( Ii )
 kodi . set_setting ( 'progress_skip_cache' , III1Ii1i1I1 )
 I11I1i1iI = '|' . join ( iII1111III1I )
 kodi . set_setting ( 'force_include_progress' , I11I1i1iI )
 if action == ACTIONS . REMOVE :
  kodi . refresh_container ( )
  if 90 - 90: o00ooo0 * i11i % o00 + IiiIII111iI
@ IiII . register ( MODES . TOGGLE_WATCHED , [ 'section' , 'id_type' , 'show_id' ] , [ 'watched' , 'season' , 'episode' ] )
def o00ooo0i1 ( section , id_type , show_id , watched = True , season = '' , episode = '' ) :
 o0OO00 . log ( 'In Watched: |%s|%s|%s|%s|%s|%s|' % ( section , id_type , show_id , season , episode , watched ) , log_utils . LOGDEBUG )
 oOOOoo00 = { id_type : show_id }
 Oo . set_watched ( section , oOOOoo00 , season , episode , watched )
 i1IiIi1 = i18n ( 'watched' ) if watched else i18n ( 'unwatched' )
 kodi . notify ( msg = i18n ( 'marked_as' ) % ( i1IiIi1 ) , duration = 5000 )
 kodi . refresh_container ( )
 if 22 - 22: iiI1i1 * O0 . i11i - i1
@ IiII . register ( MODES . URL_EXISTS , [ 'trakt_id' ] )
def o0Oo00OO0 ( trakt_id ) :
 trakt_id = str ( trakt_id )
 i11Ii11II1I1 = kodi . get_setting ( 'exists_list' )
 if i11Ii11II1I1 :
  I1II = i11Ii11II1I1 . split ( '|' )
 else :
  I1II = [ ]
  if 41 - 41: O0 * Oo0oO0ooo - ii1IiI1i . oO0o
 if trakt_id in I1II :
  I1II . remove ( trakt_id )
 else :
  I1II . append ( trakt_id )
  if 65 - 65: o0 . OoooooooOO
 i11Ii11II1I1 = '|' . join ( I1II )
 kodi . set_setting ( 'exists_list' , i11Ii11II1I1 )
 kodi . refresh_container ( )
 if 70 - 70: o0 - IiiIII111iI . iIii1I11I1II1 % iiI1i1 / ii1IiI1i - O0
@ IiII . register ( MODES . UPDATE_SUBS )
def o0O0oo0o ( ) :
 o0OO00 . log ( 'Updating Subscriptions' , log_utils . LOGDEBUG )
 IIiiii = kodi . get_setting ( MODES . UPDATE_SUBS + '-notify' ) == 'true'
 with kodi . ProgressDialog ( kodi . get_name ( ) , line1 = i18n ( 'updating_subscriptions' ) , background = True , active = IIiiii ) as iII1iii :
  II11iI1iiI ( SECTIONS . TV , iII1iii )
  if kodi . get_setting ( 'include_movies' ) == 'true' :
   II11iI1iiI ( SECTIONS . MOVIES , iII1iii )
  if kodi . get_setting ( 'library-update' ) == 'true' :
   xbmc . executebuiltin ( 'UpdateLibrary(video)' )
  if kodi . get_setting ( 'cleanup-subscriptions' ) == 'true' :
   I1ii ( )
   if 80 - 80: I11iIi1I / iIii1I11I1II1 % ii1IiI1i
  OOOo00oo0oO = datetime . datetime . now ( )
  db_connection . set_setting ( '%s-last_run' % MODES . UPDATE_SUBS , OOOo00oo0oO . strftime ( "%Y-%m-%d %H:%M:%S.%f" ) )
  if 80 - 80: i1 % II1i
  if IIiiii and kodi . get_setting ( 'auto-' + MODES . UPDATE_SUBS ) == 'true' :
   kodi . notify ( msg = i18n ( 'next_update' ) % ( float ( kodi . get_setting ( MODES . UPDATE_SUBS + '-interval' ) ) ) , duration = 5000 )
 kodi . refresh_container ( )
 if 99 - 99: Oo0oO0ooo / iIii1I11I1II1 - oO0o * I11iIi1I % oOooOoO0Oo0O
def II11iI1iiI ( section , dialog = None ) :
 OOo000 = utils2 . get_section_params ( section )
 iiII1i11i = kodi . get_setting ( '%s_sub_slug' % ( section ) )
 if not iiII1i11i :
  return
 elif iiII1i11i == utils . WATCHLIST_SLUG :
  IiI111111IIII = Oo . show_watchlist ( section )
 else :
  IiI111111IIII = Oo . show_list ( iiII1i11i , section )
  if 13 - 13: i1
 O0oo0O0 = len ( IiI111111IIII )
 for o00o0 , oOOOoo00 in enumerate ( IiI111111IIII ) :
  iiII111iIII1Ii = ( o00o0 + 1 ) * 100 / O0oo0O0
  iI1IiiiIiI1Ii = re . sub ( '\s+\(\d{4}\)$' , '' , oOOOoo00 [ 'title' ] )
  if 78 - 78: OoooooooOO / Ii11111i % ii1IiI1i * OoooooooOO
  dialog . update ( iiII111iIII1Ii , '%s %s: %s (%s)' % ( i18n ( 'updating' ) , section , iI1IiiiIiI1Ii , oOOOoo00 [ 'year' ] ) )
  try :
   ooOO00o00 ( OOo000 [ 'video_type' ] , oOOOoo00 [ 'title' ] , oOOOoo00 [ 'year' ] , oOOOoo00 [ 'ids' ] [ 'trakt' ] )
  except Exception as OoO0O00O0oo0O :
   o0OO00 . log ( 'Subscription Update Exception: |%s|%s|%s|%s| - %s' % ( OOo000 [ 'video_type' ] , oOOOoo00 [ 'title' ] , oOOOoo00 [ 'year' ] , oOOOoo00 [ 'ids' ] [ 'trakt' ] , OoO0O00O0oo0O ) , log_utils . LOGDEBUG )
   if 18 - 18: iIii1I11I1II1 + iiI1i1 * oOooOoO0Oo0O - Ii11111i / oOooOoO0Oo0O
@ IiII . register ( MODES . CLEAN_SUBS )
def I1ii ( ) :
 iiII1i11i = kodi . get_setting ( 'TV_sub_slug' )
 if not iiII1i11i :
  return
 elif iiII1i11i == utils . WATCHLIST_SLUG :
  IiI111111IIII = Oo . show_watchlist ( SECTIONS . TV )
 else :
  IiI111111IIII = Oo . show_list ( iiII1i11i , SECTIONS . TV )
  if 78 - 78: iiI1i1 . o00ooo0
 iI1i1II = [ ]
 for oOOOoo00 in IiI111111IIII :
  iiIiIIIiiI = Oo . get_show_details ( oOOOoo00 [ 'ids' ] [ 'trakt' ] )
  if iiIiIIIiiI [ 'status' ] . upper ( ) in [ 'ENDED' , 'CANCELED' , 'CANCELLED' ] :
   I1ii1ii1I = utils2 . show_id ( oOOOoo00 )
   iI1i1II . append ( { I1ii1ii1I [ 'id_type' ] : I1ii1ii1I [ 'show_id' ] } )
   if 18 - 18: IiiIII111iI * IiiIII111iI % IiiIII111iI
 if iI1i1II :
  if iiII1i11i == utils . WATCHLIST_SLUG :
   Oo . remove_from_watchlist ( SECTIONS . TV , iI1i1II )
  else :
   Oo . remove_from_list ( SECTIONS . TV , iiII1i11i , iI1i1II )
   if 17 - 17: O0 * ii1IiI1i * I11iIi1I * i11i * iiI1i1 % i1IIi
@ IiII . register ( MODES . REFRESH_IMAGES , [ 'video_type' , 'ids' ] , [ 'season' , 'episode' ] )
def IIiIi1iI1iII ( video_type , ids , season = '' , episode = '' ) :
 ids = json . loads ( ids )
 OoOo00o = image_scraper . get_images ( video_type , ids , season , episode )
 transistortv_utils . clear_thumbnails ( OoOo00o )
 image_scraper . clear_cache ( video_type , ids , season , episode )
 if 30 - 30: ii1IiI1i . iiI1i1 / iiI1i1 * i11iIiiIii
 image_scraper . get_images ( video_type , ids , season , episode , cached = False )
 kodi . refresh_container ( )
 if 46 - 46: i1 * o0 % IiiIII111iI + O0 * o00ooo0
@ IiII . register ( MODES . FLUSH_CACHE )
def ii1I11i ( ) :
 oooo000 = xbmcgui . Dialog ( )
 O0OOO = i18n ( 'flush_cache_line1' )
 ii1i1iiI = i18n ( 'flush_cache_line2' )
 Oo0oOo0ooOOOo = ''
 OoO0000o = i18n ( 'keep' )
 o0Ii1 = i18n ( 'delete' )
 if oooo000 . yesno ( i18n ( 'flush_web_cache' ) , O0OOO , ii1i1iiI , Oo0oOo0ooOOOo , OoO0000o , o0Ii1 ) :
  with kodi . WorkingDialog ( ) as i111i11I1ii :
   IIi1IiII = None
   while not xbmc . abortRequested :
    o0IIIIiI11I = db_connection . prune_cache ( prune_age = 0 )
    if IIi1IiII is None : IIi1IiII = o0IIIIiI11I
    if o0IIIIiI11I :
     i111i11I1ii . update ( 100 * ( IIi1IiII - o0IIIIiI11I ) / IIi1IiII )
    else :
     if 31 - 31: oO0o
     i111i11I1ii . update ( 100 )
     db_connection . flush_cache ( )
     break
     if 18 - 18: Oo0oO0ooo + oO0o
  kodi . refresh_container ( )
  if 5 - 5: OoooooooOO + iiI1i1 * i11i
@ IiII . register ( MODES . FLUSH_IMAGES )
def OOoooooooO ( ) :
 oooo000 = xbmcgui . Dialog ( )
 O0OOO = i18n ( 'flush_image_line1' )
 ii1i1iiI = i18n ( 'flush_image_line2' )
 Oo0oOo0ooOOOo = ''
 OoO0000o = i18n ( 'keep' )
 o0Ii1 = i18n ( 'delete' )
 if oooo000 . yesno ( i18n ( 'flush_image_cache' ) , O0OOO , ii1i1iiI , Oo0oOo0ooOOOo , OoO0000o , o0Ii1 ) :
  with kodi . WorkingDialog ( ) :
   db_connection . flush_image_cache ( )
   kodi . notify ( msg = i18n ( 'flush_complete' ) )
   if 4 - 4: o0 + OOooOOo
@ IiII . register ( MODES . PRUNE_CACHE )
def iIIiIii11i1Ii ( ) :
 OoO0O000 = xbmc . Monitor ( )
 while not OoO0O000 . abortRequested ( ) :
  if xbmc . getInfoLabel ( 'Container.PluginName' ) != kodi . get_id ( ) :
   if not db_connection . prune_cache ( ) :
    OOOo00oo0oO = datetime . datetime . now ( ) . strftime ( "%Y-%m-%d %H:%M:%S.%f" )
    db_connection . set_setting ( '%s-last_run' % ( MODES . PRUNE_CACHE ) , OOOo00oo0oO )
    o0OO00 . log ( 'Prune Completed Successfully @ %s' % ( OOOo00oo0oO ) , log_utils . LOGDEBUG )
    break
  else :
   o0OO00 . log ( 'transistortv Active... Busy... Postponing [%s]' % ( MODES . PRUNE_CACHE ) , log_utils . LOGDEBUG )
   if OoO0O000 . waitForAbort ( 30000 ) :
    break
    if 14 - 14: i1 / i1 * O0 . IiiIII111iI
@ IiII . register ( MODES . RESET_DB )
def oooOO0oOooO00 ( ) :
 if db_connection . reset_db ( ) :
  iIIiI11i1I11 = i18n ( 'db_reset_success' )
 else :
  iIIiI11i1I11 = i18n ( 'db_on_sqlite' )
 kodi . notify ( msg = iIIiI11i1I11 )
 if 29 - 29: i1 * iIii1I11I1II1 * O0 - ii1IiI1i / o00ooo0
@ IiII . register ( MODES . EXPORT_DB )
def o0oO0OO00ooOO ( ) :
 try :
  OOOoo0OO = xbmcgui . Dialog ( )
  IiIIiii11II1 = OOOoo0OO . browse ( 0 , i18n ( 'select_export_dir' ) , 'files' ) . encode ( 'utf-8' )
  if IiIIiii11II1 :
   IiIIiii11II1 = kodi . translate_path ( IiIIiii11II1 )
   iiii1i1II1 = kodi . get_keyboard ( i18n ( 'enter_export_name' ) , 'export.csv' )
   if iiii1i1II1 is not None :
    ooOO0ooo0o = IiIIiii11II1 + iiii1i1II1
    db_connection . export_from_db ( ooOO0ooo0o )
    kodi . notify ( header = i18n ( 'export_successful' ) , msg = i18n ( 'exported_to' ) % ( ooOO0ooo0o ) , duration = 5000 )
 except Exception as OoO0O00O0oo0O :
  o0OO00 . log ( 'Export Failed: %s' % ( OoO0O00O0oo0O ) , log_utils . LOGERROR )
  kodi . notify ( header = i18n ( 'export' ) , msg = i18n ( 'export_failed' ) )
  if 17 - 17: o00 + o0
@ IiII . register ( MODES . IMPORT_DB )
def II1ii1I111i11 ( ) :
 try :
  OOOoo0OO = xbmcgui . Dialog ( )
  IiIIII1iiii = OOOoo0OO . browse ( 1 , i18n ( 'select_import_file' ) , 'files' ) . encode ( 'utf-8' )
  if IiIIII1iiii :
   IiIIII1iiii = kodi . translate_path ( IiIIII1iiii )
   db_connection . import_into_db ( IiIIII1iiii )
   kodi . notify ( header = i18n ( 'import_success' ) , msg = i18n ( 'imported_from' ) % ( IiIIII1iiii ) )
 except Exception as OoO0O00O0oo0O :
  o0OO00 . log ( 'Import Failed: %s' % ( OoO0O00O0oo0O ) , log_utils . LOGERROR )
  kodi . notify ( header = i18n ( 'import' ) , msg = i18n ( 'import_failed' ) )
  if 90 - 90: OOooOOo % I11iIi1I - iIii1I11I1II1 % ii1IiI1i
@ IiII . register ( MODES . ADD_TO_LIBRARY , [ 'video_type' , 'title' , 'year' , 'trakt_id' ] )
def IIiI11I1I1i1i ( video_type , title , year , trakt_id ) :
 try :
  if video_type == VIDEO_TYPES . MOVIE and year :
   IiIIiIIIiIii = '%s (%s)' % ( title , year )
  else :
   IiIIiIIIiIii = title
  ooOO00o00 ( video_type , title , year , trakt_id )
 except Exception as OoO0O00O0oo0O :
  kodi . notify ( msg = i18n ( 'not_added_to_lib' ) % ( IiIIiIIIiIii , OoO0O00O0oo0O ) , duration = 5000 )
  return
  if 86 - 86: i1IIi
 kodi . notify ( msg = i18n ( 'added_to_lib' ) % ( IiIIiIIIiIii ) , duration = 5000 )
 if 13 - 13: O0
def ooOO00o00 ( video_type , title , year , trakt_id ) :
 o0OO00 . log ( 'Creating .strm for |%s|%s|%s|%s|' % ( video_type , title , year , trakt_id ) , log_utils . LOGDEBUG )
 oO0O00oOOoooO = local_scraper . Scraper ( )
 O0o0O = kodi . get_setting ( 'exclude_local' ) == 'true'
 ii111 = int ( kodi . get_setting ( 'create_nfo' ) )
 if 93 - 93: OoooooooOO * o0
 if video_type == VIDEO_TYPES . TVSHOW :
  I1IiI1iIiIiii = kodi . get_setting ( 'tvshow-folder' )
  I1IiI1iIiIiii = kodi . translate_path ( I1IiI1iIiIiii )
  iiIiIIIiiI = Oo . get_show_details ( trakt_id )
  iiIiIIIiiI [ 'title' ] = re . sub ( ' \(\d{4}\)$' , '' , iiIiIIIiiI [ 'title' ] )
  I1IiIIi = Oo . get_seasons ( trakt_id )
  I1iiI1II = kodi . get_setting ( 'include_unknown' ) == 'true'
  if 44 - 44: o0 / i1IIi + iIii1I11I1II1 / iIii1I11I1II1 * iIii1I11I1II1 . oO0o
  if not I1IiIIi :
   o0OO00 . log ( 'No Seasons found for %s (%s)' % ( iiIiIIIiiI [ 'title' ] , iiIiIIIiiI [ 'year' ] ) , log_utils . LOGERROR )
  else :
   if ii111 > 0 :
    Ooii1IIi1ii = oo00 ( I1IiI1iIiIiii , video_type , iiIiIIIiiI [ 'title' ] , iiIiIIIiiI [ 'year' ] )
    if ( ( ii111 == 1 ) and ( iiIiIIIiiI [ 'title' ] not in Ooii1IIi1ii ) ) or ii111 == 2 :
     oo0OoOOooO ( Ooii1IIi1ii , video_type , iiIiIIIiiI [ 'ids' ] )
     if 60 - 60: o00
  for III1i1iI1 in I1IiIIi :
   oOO0o00o0Oo0O = III1i1iI1 [ 'number' ]
   if kodi . get_setting ( 'include_specials' ) == 'true' or oOO0o00o0Oo0O != 0 :
    ooo0O = Oo . get_episodes ( trakt_id , oOO0o00o0Oo0O )
    for iI in ooo0O :
     iIIi1iiII = iI [ 'number' ]
     iiO0oOoo = utils2 . make_air_date ( iI [ 'first_aired' ] )
     if O0o0O :
      OoOOoO0O0oO = oO0O00oOOoooO . get_url ( ScraperVideo ( VIDEO_TYPES . EPISODE , title , year , trakt_id , oOO0o00o0Oo0O , iIIi1iiII , iI [ 'title' ] , iiO0oOoo ) )
      if OoOOoO0O0oO and OoOOoO0O0oO != FORCE_NO_MATCH :
       continue
       if 92 - 92: o0 / i11iIiiIii + I11iIi1I
     if utils2 . show_requires_source ( trakt_id ) :
      oOo0Oo0O0O = True
     else :
      if ( iI [ 'first_aired' ] is not None and utils . iso_2_utc ( iI [ 'first_aired' ] ) <= time . time ( ) ) or ( I1iiI1II and iI [ 'first_aired' ] is None ) :
       oOo0Oo0O0O = False
      else :
       continue
       if 48 - 48: o0 - Oo0oO0ooo + o0 - oOooOoO0Oo0O * i11iIiiIii . II1i
     I1iIIIiI = utils2 . filename_from_title ( iiIiIIIiiI [ 'title' ] , video_type ) + '.strm'
     I1iIIIiI = I1iIIIiI % ( '%02d' % int ( oOO0o00o0Oo0O ) , '%02d' % int ( iIIi1iiII ) )
     OoiI1I1 = os . path . join ( oo00 ( I1IiI1iIiIiii , video_type , iiIiIIIiiI [ 'title' ] , iiIiIIIiiI [ 'year' ] , season = oOO0o00o0Oo0O ) , I1iIIIiI )
     I1III1i1I = kodi . get_plugin_url ( { 'mode' : MODES . GET_SOURCES , 'video_type' : VIDEO_TYPES . EPISODE , 'title' : iiIiIIIiiI [ 'title' ] , 'year' : year , 'season' : oOO0o00o0Oo0O ,
 'episode' : iIIi1iiII , 'trakt_id' : trakt_id , 'ep_title' : iI [ 'title' ] , 'ep_airdate' : iiO0oOoo } )
     OOOOO0 ( I1III1i1I , OoiI1I1 , VIDEO_TYPES . EPISODE , iiIiIIIiiI [ 'title' ] , iiIiIIIiiI [ 'year' ] , trakt_id , oOO0o00o0Oo0O , iIIi1iiII , require_source = oOo0Oo0O0O )
     if 79 - 79: i11i - Oo0oO0ooo . i1IIi + O0 % O0 * oOooOoO0Oo0O
 elif video_type == VIDEO_TYPES . MOVIE :
  if O0o0O :
   Ii1Ii1I = oO0O00oOOoooO . get_url ( ScraperVideo ( video_type , title , year , trakt_id ) )
   if Ii1Ii1I and Ii1Ii1I != FORCE_NO_MATCH :
    raise Exception ( i18n ( 'local_exists' ) )
    if 54 - 54: IiiIII111iI + ii1IiI1i
  I1IiI1iIiIiii = kodi . get_setting ( 'movie-folder' )
  I1IiI1iIiIiii = kodi . translate_path ( I1IiI1iIiIiii )
  if ii111 > 0 :
   o0O00O = oo00 ( I1IiI1iIiIiii , video_type , title , year )
   if ( ( ii111 == 1 ) and ( title not in o0O00O ) ) or ii111 == 2 :
    O0OOOOOoo = Oo . get_movie_details ( trakt_id )
    oo0OoOOooO ( o0O00O , video_type , O0OOOOOoo [ 'ids' ] )
  I1III1i1I = kodi . get_plugin_url ( { 'mode' : MODES . GET_SOURCES , 'video_type' : video_type , 'title' : title , 'year' : year , 'trakt_id' : trakt_id } )
  I1iIIIiI = utils2 . filename_from_title ( title , VIDEO_TYPES . MOVIE , year ) + '.strm'
  OoiI1I1 = os . path . join ( oo00 ( I1IiI1iIiIiii , video_type , title , year ) , I1iIIIiI )
  OOOOO0 ( I1III1i1I , OoiI1I1 , VIDEO_TYPES . MOVIE , title , year , trakt_id , require_source = kodi . get_setting ( 'require_source' ) == 'true' )
  if 69 - 69: oOooOoO0Oo0O + II1i
def oo00 ( base_path , video_type , title , year = '' , season = '' ) :
 i1IiII = re . sub ( r'[^\w\-_\. ]' , '_' , title )
 i1IiII = '%s (%s)' % ( i1IiII , year ) if year else i1IiII
 iI1ii1Ii = os . path . join ( base_path , i1IiII )
 if ( video_type == VIDEO_TYPES . TVSHOW ) and season :
  iI1ii1Ii = os . path . join ( iI1ii1Ii , 'Season %s' % ( season ) )
 return iI1ii1Ii
 if 12 - 12: II1i / ii1IiI1i
def ooooo0Oo0 ( video_type , ids ) :
 o0I1IIIi11ii11 = 'http://thetvdb.com/?tab=series&id=%s'
 O0o0oo0oOO0oO = 'https://www.themoviedb.org/%s/%s'
 iIiIII1iI1111 = 'http://www.imdb.com/title/%s/'
 if 37 - 37: i11iIiiIii % IiiIII111iI * Ii11111i * Ii11111i * oO0o
 if 'tvdb' in ids :
  return o0I1IIIi11ii11 % ( str ( ids [ 'tvdb' ] ) )
 elif 'tmdb' in ids :
  if video_type == VIDEO_TYPES . TVSHOW :
   I1I1i = 'tv'
  else :
   I1I1i = 'movie'
  return O0o0oo0oOO0oO % ( I1I1i , str ( ids [ 'tmdb' ] ) )
 elif 'imdb' in ids :
  return iIiIII1iI1111 % ( str ( ids [ 'imdb' ] ) )
 else :
  return ''
  if 87 - 87: o00 + Oo0oO0ooo + O0 / i1IIi % o00ooo0 / o00
def oo0OoOOooO ( path , video_type , meta_ids ) :
 OOo000OO000 = ooooo0Oo0 ( video_type , meta_ids )
 if OOo000OO000 :
  I1iIIIiI = video_type . lower ( ) . replace ( ' ' , '' ) + '.nfo'
  path = os . path . join ( path , I1iIIIiI )
  path = xbmc . makeLegalFilename ( path )
  if not xbmcvfs . exists ( os . path . dirname ( path ) ) :
   try :
    try : xbmcvfs . mkdirs ( os . path . dirname ( path ) )
    except : os . makedirs ( os . path . dirname ( path ) )
   except Exception as OoO0O00O0oo0O :
    o0OO00 . log ( 'Failed to create directory %s: %s' % ( path , str ( OoO0O00O0oo0O ) ) , log_utils . LOGERROR )
    if 83 - 83: OOooOOo % IiiIII111iI + iiI1i1 % i11iIiiIii + O0
   OoOOoooO000 = ''
   try :
    OoO0o000oOo = xbmcvfs . File ( path , 'r' )
    OoOOoooO000 = OoO0o000oOo . read ( )
    OoO0o000oOo . close ( )
   except : pass
   if 88 - 88: i1IIi * o00 * IiiIII111iI - Oo0oO0ooo * iiI1i1 / OoooooooOO
   if OOo000OO000 != OoOOoooO000 :
    try :
     o0OO00 . log ( 'Writing nfo: %s' % OOo000OO000 , log_utils . LOGDEBUG )
     iiI1i = xbmcvfs . File ( path , 'w' )
     iiI1i . write ( OOo000OO000 )
     iiI1i . close ( )
    except Exception as OoO0O00O0oo0O :
     o0OO00 . log ( 'Failed to create .nfo file (%s): %s' % ( path , OoO0O00O0oo0O ) , log_utils . LOGERROR )
     if 72 - 72: ii1IiI1i * iIii1I11I1II1 % iiI1i1
def OOOOO0 ( stream , path , video_type , title , year , trakt_id , season = '' , episode = '' , require_source = False ) :
 path = xbmc . makeLegalFilename ( path )
 if not xbmcvfs . exists ( os . path . dirname ( path ) ) :
  try :
   try : xbmcvfs . mkdirs ( os . path . dirname ( path ) )
   except : os . makedirs ( os . path . dirname ( path ) )
  except Exception as OoO0O00O0oo0O :
   o0OO00 . log ( 'Failed to create directory %s: %s' % ( path , str ( OoO0O00O0oo0O ) ) , log_utils . LOGERROR )
   if 20 - 20: i11i % iIii1I11I1II1 + IiiIII111iI * i11i * i1 % i1
 try :
  OoO0o000oOo = xbmcvfs . File ( path , 'r' )
  iI1I1 = OoO0o000oOo . read ( )
  OoO0o000oOo . close ( )
 except :
  iI1I1 = ''
  if 46 - 46: iIii1I11I1II1
  if 33 - 33: iiI1i1 % iiI1i1 % O0 / oOooOoO0Oo0O . i1IIi
  if 91 - 91: Oo0oO0ooo * iiI1i1 - i11i . oOooOoO0Oo0O - o0 + Oo0oO0ooo
 if stream != iI1I1 :
  try :
   if not require_source or transistortv_utils . url_exists ( ScraperVideo ( video_type , title , year , trakt_id , season , episode ) ) :
    o0OO00 . log ( 'Writing strm: %s' % stream , log_utils . LOGDEBUG )
    iiI1i = xbmcvfs . File ( path , 'w' )
    iiI1i . write ( stream )
    iiI1i . close ( )
   else :
    o0OO00 . log ( 'No strm written for |%s|%s|%s|%s|%s|' % ( video_type , title , year , season , episode ) , log_utils . LOGWARNING )
  except Exception as OoO0O00O0oo0O :
   o0OO00 . log ( 'Failed to create .strm file (%s): %s' % ( path , OoO0O00O0oo0O ) , log_utils . LOGERROR )
   if 56 - 56: OOooOOo / o00ooo0 * oOooOoO0Oo0O . OOooOOo
def OoOo00o0OO ( slug , pick_label , pick_mode , section ) :
 if not slug :
  kodi . create_item ( { 'mode' : pick_mode , 'section' : section } , pick_label , is_folder = False , is_playable = False )
  kodi . set_content ( CONTENT_TYPES . ADDONS )
  kodi . end_of_directory ( )
 else :
  I1II ( section , slug )
  if 15 - 15: i11iIiiIii
def OOoO000O0OO ( section , list_data , slug = None , query = None , page = None ) :
 OOo000 = utils2 . get_section_params ( section )
 I11i1I1ii1i1 = { }
 oO0ooooo0O00 = { }
 if iI1 :
  for oOOOoo00 in Oo . get_watched ( section ) :
   if section == SECTIONS . MOVIES :
    I11i1I1ii1i1 [ oOOOoo00 [ 'movie' ] [ 'ids' ] [ 'trakt' ] ] = oOOOoo00 [ 'plays' ] > 0
   else :
    I11i1I1ii1i1 [ oOOOoo00 [ 'show' ] [ 'ids' ] [ 'trakt' ] ] = len ( [ OoO0O00O0oo0O for IIiiI in oOOOoo00 [ 'seasons' ] if IIiiI [ 'number' ] != 0 for OoO0O00O0oo0O in IIiiI [ 'episodes' ] ] )
    if 5 - 5: ii1IiI1i % II1i + o00ooo0
  if slug == COLLECTION_SLUG :
   oO0ooooo0O00 = dict . fromkeys ( [ iiIiIIIiiI [ 'ids' ] [ 'trakt' ] for iiIiIIIiiI in list_data ] , True )
  else :
   iiiIi1II1III = Oo . get_collection ( section , full = False )
   oO0ooooo0O00 = dict . fromkeys ( [ iiIiIIIiiI [ 'ids' ] [ 'trakt' ] for iiIiIIIiiI in iiiIi1II1III ] , True )
   if 8 - 8: o00ooo0 % Ii11111i . o0 % Oo0oO0ooo - II1i
 ooo0O0o00O = len ( list_data )
 for iiIiIIIiiI in list_data :
  II11iiii1Ii = [ ]
  I1ii1ii1I = utils2 . show_id ( iiIiIIIiiI )
  I11i1II = iiIiIIIiiI [ 'ids' ] [ 'trakt' ]
  if slug and slug != COLLECTION_SLUG :
   ii1I = { 'mode' : MODES . REM_FROM_LIST , 'slug' : slug , 'section' : section }
   ii1I . update ( I1ii1ii1I )
   II11iiii1Ii . append ( ( i18n ( 'remove_from_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
   if 16 - 16: II1i
  oOo0O0o000Ooo = kodi . get_setting ( '%s_sub_slug' % ( section ) )
  if iI1 and oOo0O0o000Ooo :
   if oOo0O0o000Ooo != slug :
    ii1I = { 'mode' : MODES . ADD_TO_LIST , 'section' : OOo000 [ 'section' ] , 'slug' : oOo0O0o000Ooo }
    ii1I . update ( I1ii1ii1I )
    II11iiii1Ii . append ( ( i18n ( 'subscribe' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
   elif section == SECTIONS . TV :
    if utils2 . show_requires_source ( I11i1II ) :
     iIi1ii1I1 = i18n ( 'require_aired_only' )
    else :
     iIi1ii1I1 = i18n ( 'require_page_only' )
    ii1I = { 'mode' : MODES . URL_EXISTS , 'trakt_id' : I11i1II }
    II11iiii1Ii . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
    if 65 - 65: O0 . Oo0oO0ooo
  if section == SECTIONS . MOVIES :
   iiIiIIIiiI [ 'watched' ] = I11i1I1ii1i1 . get ( I11i1II , False )
  else :
   try :
    o0OO00 . log ( '%s/%s: Watched: %s - Aired: %s' % ( I11i1II , iiIiIIIiiI [ 'ids' ] [ 'slug' ] , I11i1I1ii1i1 . get ( I11i1II , 'NaN' ) , iiIiIIIiiI [ 'aired_episodes' ] ) , log_utils . LOGDEBUG )
    iiIiIIIiiI [ 'watched' ] = I11i1I1ii1i1 [ I11i1II ] >= iiIiIIIiiI [ 'aired_episodes' ]
    iiIiIIIiiI [ 'watched_count' ] = I11i1I1ii1i1 [ I11i1II ]
   except : iiIiIIIiiI [ 'watched' ] = False
   if 39 - 39: Oo0oO0ooo / O0 * o00ooo0
  iiIiIIIiiI [ 'in_collection' ] = oO0ooooo0O00 . get ( I11i1II , False )
  if 17 - 17: oO0o / iIii1I11I1II1 - i1 + oOooOoO0Oo0O % Ii11111i
  O0o0Oo , Oo00OOOOO = O0OO00o0OO ( OOo000 , iiIiIIIiiI , II11iiii1Ii )
  xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = OOo000 [ 'folder' ] , totalItems = ooo0O0o00O )
  if 14 - 14: OOooOOo % o00ooo0 + I11iIi1I + i1
 if query and page and ooo0O0o00O >= int ( kodi . get_setting ( 'list_size' ) ) :
  query [ 'page' ] = int ( page ) + 1
  iIi1ii1I1 = '%s >>' % ( i18n ( 'next_page' ) )
  kodi . create_item ( query , iIi1ii1I1 , thumb = utils2 . art ( 'nextpage.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True )
  if 76 - 76: i1 - i11iIiiIii + ii1IiI1i + Ii11111i / OoooooooOO
 kodi . set_view ( OOo000 [ 'content_type' ] , True )
 kodi . end_of_directory ( )
 if 50 - 50: i11i - o00 + iIii1I11I1II1 + iIii1I11I1II1
def IiiiIiii11 ( mode , start_date , days ) :
 start_date = utils2 . to_datetime ( start_date , '%Y-%m-%d' )
 OoooooOo = start_date - datetime . timedelta ( days = 7 )
 OooOo = start_date + datetime . timedelta ( days = 7 )
 oOo0 = datetime . datetime . strftime ( OoooooOo , '%Y-%m-%d' )
 I1Ii11i = datetime . datetime . strftime ( OooOo , '%Y-%m-%d' )
 if 19 - 19: o00ooo0 - OOooOOo . iIii1I11I1II1 . ii1IiI1i / Ii11111i
 iIi1ii1I1 = '<< %s' % ( i18n ( 'previous_week' ) )
 kodi . create_item ( { 'mode' : mode , 'start_date' : oOo0 } , iIi1ii1I1 , thumb = utils2 . art ( 'previous.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True )
 if 87 - 87: ii1IiI1i - Oo0oO0ooo - Ii11111i + o0 % iIii1I11I1II1 / i11iIiiIii
 I11i1I1ii1i1 = { }
 if iI1 :
  i1iIIII1iiIIi = Oo . get_watched ( SECTIONS . TV )
  for oOOOoo00 in i1iIIII1iiIIi :
   I11i1II = oOOOoo00 [ 'show' ] [ 'ids' ] [ 'trakt' ]
   I11i1I1ii1i1 [ I11i1II ] = { }
   for III1i1iI1 in oOOOoo00 [ 'seasons' ] :
    I11i1I1ii1i1 [ I11i1II ] [ III1i1iI1 [ 'number' ] ] = { }
    for iI in III1i1iI1 [ 'episodes' ] :
     I11i1I1ii1i1 [ I11i1II ] [ III1i1iI1 [ 'number' ] ] [ iI [ 'number' ] ] = True
     if 17 - 17: iiI1i1
 Ooo0oOooo0 = len ( days )
 for oOOOoo00 in days :
  iI = oOOOoo00 [ 'episode' ]
  iiIiIIIiiI = oOOOoo00 [ 'show' ]
  oOoO0ooO0000 = utils . iso_2_utc ( iI [ 'first_aired' ] )
  OOOOO = datetime . date . fromtimestamp ( oOoO0ooO0000 )
  if 68 - 68: iiI1i1 + i1 - O0 / i1 * ii1IiI1i
  try : iI [ 'watched' ] = I11i1I1ii1i1 [ iiIiIIIiiI [ 'ids' ] [ 'trakt' ] ] [ iI [ 'season' ] ] [ iI [ 'number' ] ]
  except : iI [ 'watched' ] = False
  if 50 - 50: Ii11111i + i11i . oOooOoO0Oo0O / i1IIi / oOooOoO0Oo0O * IiiIII111iI
  if OOOOO < start_date . date ( ) :
   o0OO00 . log ( 'Skipping show date |%s| before start: |%s|' % ( OOOOO , start_date . date ( ) ) , log_utils . LOGDEBUG )
   continue
  elif OOOOO >= OooOo . date ( ) :
   o0OO00 . log ( 'Stopping because show date |%s| >= end: |%s|' % ( OOOOO , OooOo . date ( ) ) , log_utils . LOGDEBUG )
   break
   if 85 - 85: i11i . Oo0oO0ooo % Ii11111i % iiI1i1
  OOOoO000 = utils2 . make_day ( datetime . date . fromtimestamp ( oOoO0ooO0000 ) . isoformat ( ) )
  if kodi . get_setting ( 'calendar_time' ) != '0' :
   oOOOO = '%s@%s' % ( OOOoO000 , utils2 . make_time ( oOoO0ooO0000 , 'calendar_time' ) )
  else :
   oOOOO = OOOoO000
   if 80 - 80: IiiIII111iI * iiI1i1 / iIii1I11I1II1 % IiiIII111iI / iIii1I11I1II1
  II11iiii1Ii = [ ]
  ii1I = { 'mode' : MODES . SEASONS , 'trakt_id' : iiIiIIIiiI [ 'ids' ] [ 'trakt' ] , 'title' : iiIiIIIiiI [ 'title' ] , 'year' : iiIiIIIiiI [ 'year' ] , 'tvdb_id' : iiIiIIIiiI [ 'ids' ] [ 'tvdb' ] }
  II11iiii1Ii . append ( ( i18n ( 'browse_seasons' ) , 'Container.Update(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 42 - 42: i1IIi / i11iIiiIii . o0 * II1i . i11iIiiIii * O0
  O0o0Oo , Oo00OOOOO = I11i1 ( iiIiIIIiiI , iI , show_subs = False , menu_items = II11iiii1Ii )
  iIi1ii1I1 = O0o0Oo . getLabel ( )
  iIi1ii1I1 = '[[COLOR deeppink]%s[/COLOR]] %s - %s' % ( oOOOO , iiIiIIIiiI [ 'title' ] , iIi1ii1I1 )
  if iI [ 'season' ] == 1 and iI [ 'number' ] == 1 :
   iIi1ii1I1 = '[COLOR green]%s[/COLOR]' % ( iIi1ii1I1 )
  O0o0Oo . setLabel ( iIi1ii1I1 )
  xbmcplugin . addDirectoryItem ( int ( sys . argv [ 1 ] ) , Oo00OOOOO , O0o0Oo , isFolder = False , totalItems = Ooo0oOooo0 )
  if 44 - 44: i1IIi . oOooOoO0Oo0O / i11iIiiIii + o00ooo0
 iIi1ii1I1 = '%s >>' % ( i18n ( 'next_week' ) )
 kodi . create_item ( { 'mode' : mode , 'start_date' : I1Ii11i } , iIi1ii1I1 , thumb = utils2 . art ( 'next.png' ) , fanart = utils2 . art ( 'fanart.jpg' ) , is_folder = True )
 kodi . set_content ( CONTENT_TYPES . EPISODES )
 kodi . end_of_directory ( )
 if 27 - 27: Ii11111i
def oOO00oO00O0OO ( season , info , trakt_id , title , year , tvdb_id ) :
 iIi1ii1I1 = '%s %s' % ( i18n ( 'season' ) , season [ 'number' ] )
 OOOOoOOo0O0 = { 'trakt' : trakt_id , 'tvdb' : tvdb_id }
 OoOo = image_scraper . get_images ( VIDEO_TYPES . SEASON , OOOOoOOo0O0 , season [ 'number' ] )
 O0o0Oo = utils . make_list_item ( iIi1ii1I1 , season , OoOo )
 o0OO00 . log ( 'Season Info: %s' % ( info ) , log_utils . LOGDEBUG )
 info [ 'mediatype' ] = 'season'
 O0o0Oo . setInfo ( 'video' , info )
 II11iiii1Ii = [ ]
 if 52 - 52: o00 % ii1IiI1i + iIii1I11I1II1 * IiiIII111iI . oO0o
 if 'playcount' in info and info [ 'playcount' ] :
  I11i1I1ii1i1 = False
  iIi1ii1I1 = i18n ( 'mark_as_unwatched' )
 else :
  I11i1I1ii1i1 = True
  iIi1ii1I1 = i18n ( 'mark_as_watched' )
  if 95 - 95: iIii1I11I1II1 . o00ooo0 - OoooooooOO * i1 / OOooOOo
 if iI1 :
  ii1I = { 'mode' : MODES . RATE , 'section' : SECTIONS . TV , 'season' : season [ 'number' ] , 'id_type' : 'trakt' , 'show_id' : trakt_id }
  II11iiii1Ii . append ( ( i18n ( 'rate_on_trakt' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  ii1I = { 'mode' : MODES . TOGGLE_WATCHED , 'section' : SECTIONS . TV , 'season' : season [ 'number' ] , 'id_type' : 'trakt' , 'show_id' : trakt_id , 'watched' : I11i1I1ii1i1 }
  II11iiii1Ii . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 74 - 74: IiiIII111iI
 ii1I = { 'mode' : MODES . SET_VIEW , 'content_type' : CONTENT_TYPES . SEASONS }
 II11iiii1Ii . append ( ( i18n ( 'set_as_season_view' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . REFRESH_IMAGES , 'video_type' : VIDEO_TYPES . SEASON , 'ids' : json . dumps ( OOOOoOOo0O0 ) , 'season' : season [ 'number' ] }
 II11iiii1Ii . append ( ( i18n ( 'refresh_images' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_URL_SEARCH , 'video_type' : VIDEO_TYPES . SEASON , 'title' : title , 'year' : year , 'trakt_id' : trakt_id , 'season' : season [ 'number' ] }
 II11iiii1Ii . append ( ( i18n ( 'set_rel_url_search' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_URL_MANUAL , 'video_type' : VIDEO_TYPES . SEASON , 'title' : title , 'year' : year , 'trakt_id' : trakt_id , 'season' : season [ 'number' ] }
 II11iiii1Ii . append ( ( i18n ( 'set_rel_url_manual' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if 34 - 34: II1i
 O0o0Oo . addContextMenuItems ( II11iiii1Ii , replaceItems = True )
 return O0o0Oo
 if 44 - 44: i1IIi % oOooOoO0Oo0O % OOooOOo
def I11i1 ( show , episode , show_subs = True , menu_items = None ) :
 if 9 - 9: o0 % OoooooooOO - oO0o
 if 43 - 43: i1 % i1
 if menu_items is None : menu_items = [ ]
 show [ 'title' ] = re . sub ( ' \(\d{4}\)$' , '' , show [ 'title' ] )
 if episode [ 'title' ] is None :
  iIi1ii1I1 = '%sx%s' % ( episode [ 'season' ] , episode [ 'number' ] )
 else :
  iIi1ii1I1 = '%sx%s %s' % ( episode [ 'season' ] , episode [ 'number' ] , episode [ 'title' ] )
  if 46 - 46: o0 % iIii1I11I1II1 . II1i . O0 * Oo0oO0ooo / OoooooooOO
 if 'first_aired' in episode : O0OoOoO00O = utils . iso_2_utc ( episode [ 'first_aired' ] )
 try : II1iI1IIi = time . asctime ( time . localtime ( O0OoOoO00O ) )
 except : II1iI1IIi = i18n ( 'unavailable' )
 if 41 - 41: oOooOoO0Oo0O - o00 % i11i . o00 - iiI1i1
 o0OO00 . log ( 'First Aired: Title: %s S/E: %s/%s fa: %s, utc: %s, local: %s' %
 ( show [ 'title' ] , episode [ 'season' ] , episode [ 'number' ] , episode [ 'first_aired' ] , O0OoOoO00O , II1iI1IIi ) , log_utils . LOGDEBUG )
 if 45 - 45: oO0o - Ii11111i
 if kodi . get_setting ( 'unaired_indicator' ) == 'true' and ( not episode [ 'first_aired' ] or O0OoOoO00O > time . time ( ) ) :
  iIi1ii1I1 = '[I][COLOR chocolate]%s[/COLOR][/I]' % ( iIi1ii1I1 )
  if 70 - 70: i1 % oOooOoO0Oo0O / oOooOoO0Oo0O . iiI1i1 % Oo0oO0ooo . i11i
 if show_subs and utils2 . srt_indicators_enabled ( ) :
  o0OO0Oo = SRT_Scraper ( )
  I1ii1Ii1 = kodi . get_setting ( 'subtitle-lang' )
  I11iiii1I = o0OO0Oo . get_tvshow_id ( show [ 'title' ] , show [ 'year' ] )
  if I11iiii1I is not None :
   OoO = o0OO0Oo . get_episode_subtitles ( I1ii1Ii1 , I11iiii1I , episode [ 'season' ] , episode [ 'number' ] )
  else :
   OoO = [ ]
  iIi1ii1I1 = utils2 . format_episode_label ( iIi1ii1I1 , episode [ 'season' ] , episode [ 'number' ] , OoO )
  if 63 - 63: Ii11111i . i11i . iiI1i1
 I1I1IIIIi11 = transistortv_utils . make_info ( episode , show )
 OoOo = image_scraper . get_images ( VIDEO_TYPES . EPISODE , show [ 'ids' ] , episode [ 'season' ] , episode [ 'number' ] )
 O0o0Oo = utils . make_list_item ( iIi1ii1I1 , I1I1IIIIi11 , OoOo )
 O0o0Oo . setInfo ( 'video' , I1I1IIIIi11 )
 iiO0oOoo = ''
 if episode [ 'first_aired' ] :
  iiO0oOoo = utils2 . make_air_date ( episode [ 'first_aired' ] )
 ii1I = { 'mode' : MODES . GET_SOURCES , 'video_type' : VIDEO_TYPES . EPISODE , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'season' : episode [ 'season' ] , 'episode' : episode [ 'number' ] ,
 'ep_title' : episode [ 'title' ] , 'ep_airdate' : iiO0oOoo , 'trakt_id' : show [ 'ids' ] [ 'trakt' ] , 'random' : time . time ( ) }
 Oo00OOOOO = kodi . get_plugin_url ( ii1I )
 if 68 - 68: i1IIi - I11iIi1I / o0 % iiI1i1 . II1i
 ii1I = { 'video_type' : VIDEO_TYPES . EPISODE , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'season' : episode [ 'season' ] , 'episode' : episode [ 'number' ] ,
 'ep_title' : episode [ 'title' ] , 'ep_airdate' : iiO0oOoo , 'trakt_id' : show [ 'ids' ] [ 'trakt' ] }
 if kodi . get_setting ( 'auto-play' ) == 'true' :
  ii1I [ 'mode' ] = MODES . SELECT_SOURCE
  iIi1ii1I1 = i18n ( 'select_source' )
  if kodi . get_setting ( 'source-win' ) == 'Dialog' :
   OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
  else :
   OooO0 = 'Container.Update(%s)' % kodi . get_plugin_url ( ii1I )
 else :
  ii1I [ 'mode' ] = MODES . AUTOPLAY
  OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
  iIi1ii1I1 = i18n ( 'auto-play' )
 menu_items . insert ( 0 , ( iIi1ii1I1 , OooO0 ) , )
 if 9 - 9: o00ooo0
 if kodi . get_setting ( 'show_download' ) == 'true' :
  ii1I = { 'mode' : MODES . DOWNLOAD_SOURCE , 'video_type' : VIDEO_TYPES . EPISODE , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'season' : episode [ 'season' ] , 'episode' : episode [ 'number' ] ,
 'ep_title' : episode [ 'title' ] , 'ep_airdate' : iiO0oOoo , 'trakt_id' : show [ 'ids' ] [ 'trakt' ] }
  if kodi . get_setting ( 'source-win' ) == 'Dialog' :
   OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
  else :
   OooO0 = 'Container.Update(%s)' % kodi . get_plugin_url ( ii1I )
  menu_items . append ( ( i18n ( 'download_source' ) , OooO0 ) , )
  if 48 - 48: OOooOOo + OOooOOo - o0
 I1ii1ii1I = utils2 . show_id ( show )
 ii1I = { 'mode' : MODES . ADD_TO_LIST , 'section' : SECTIONS . TV }
 ii1I . update ( I1ii1ii1I )
 menu_items . append ( ( i18n ( 'add_show_to_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if 27 - 27: i1 + ii1IiI1i * Oo0oO0ooo
 if episode . get ( 'watched' , False ) :
  I11i1I1ii1i1 = False
  iIi1ii1I1 = i18n ( 'mark_as_unwatched' )
 else :
  I11i1I1ii1i1 = True
  iIi1ii1I1 = i18n ( 'mark_as_watched' )
  if 83 - 83: iIii1I11I1II1
 ii1I = { 'mode' : MODES . REFRESH_IMAGES , 'video_type' : VIDEO_TYPES . EPISODE , 'ids' : json . dumps ( show [ 'ids' ] ) , 'season' : episode [ 'season' ] , 'episode' : episode [ 'number' ] }
 menu_items . append ( ( i18n ( 'refresh_images' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if iI1 :
  I1ii1ii1I = utils2 . show_id ( show )
  ii1I = { 'mode' : MODES . RATE , 'section' : SECTIONS . TV , 'season' : episode [ 'season' ] , 'episode' : episode [ 'number' ] }
  if 72 - 72: iiI1i1
  if show [ 'ids' ] . get ( 'imdb' ) :
   ii1I . update ( { 'id_type' : 'imdb' , 'show_id' : show [ 'ids' ] [ 'imdb' ] } )
  else :
   ii1I . update ( I1ii1ii1I )
  menu_items . append ( ( i18n ( 'rate_on_trakt' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 87 - 87: i1IIi
  ii1I = { 'mode' : MODES . TOGGLE_WATCHED , 'section' : SECTIONS . TV , 'season' : episode [ 'season' ] , 'episode' : episode [ 'number' ] , 'watched' : I11i1I1ii1i1 }
  ii1I . update ( I1ii1ii1I )
  menu_items . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 48 - 48: o0 * IiiIII111iI * iIii1I11I1II1 + i11iIiiIii - OoooooooOO
 ii1I = { 'mode' : MODES . SET_URL_SEARCH , 'video_type' : VIDEO_TYPES . TVSHOW , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : show [ 'ids' ] [ 'trakt' ] }
 menu_items . append ( ( i18n ( 'set_rel_show_url_search' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_URL_SEARCH , 'video_type' : VIDEO_TYPES . SEASON , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : show [ 'ids' ] [ 'trakt' ] , 'season' : episode [ 'season' ] }
 menu_items . append ( ( i18n ( 'set_rel_season_url_search' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_URL_MANUAL , 'video_type' : VIDEO_TYPES . EPISODE , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'season' : episode [ 'season' ] ,
 'episode' : episode [ 'number' ] , 'ep_title' : episode [ 'title' ] , 'ep_airdate' : iiO0oOoo , 'trakt_id' : show [ 'ids' ] [ 'trakt' ] }
 menu_items . append ( ( i18n ( 'set_rel_url_manual' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if 38 - 38: ii1IiI1i / iIii1I11I1II1 % i11iIiiIii - o00ooo0 * II1i / ii1IiI1i
 O0o0Oo . addContextMenuItems ( menu_items , replaceItems = True )
 return O0o0Oo , Oo00OOOOO
 if 13 - 13: i1 * I11iIi1I - o00
def O0OO00o0OO ( section_params , show , menu_items = None ) :
 if menu_items is None : menu_items = [ ]
 if not isinstance ( show [ 'title' ] , basestring ) : show [ 'title' ] = ''
 show [ 'title' ] = re . sub ( ' \(\d{4}\)$' , '' , show [ 'title' ] )
 iIi1ii1I1 = '%s (%s)' % ( show [ 'title' ] , show [ 'year' ] )
 I11i1II = show [ 'ids' ] [ 'trakt' ]
 OoOo = image_scraper . get_images ( section_params [ 'video_type' ] , show [ 'ids' ] )
 if kodi . get_setting ( 'include_people' ) == 'true' :
  I11Ii = Oo . get_people ( section_params [ 'section' ] , I11i1II )
  oO0OOOO0o0 = transistortv_utils . make_cast ( show [ 'ids' ] , I11Ii )
 else :
  I11Ii = None
  oO0OOOO0o0 = None
  if 67 - 67: o0 / Oo0oO0ooo - o00ooo0
 O0o0Oo = utils . make_list_item ( iIi1ii1I1 , show , OoOo , oO0OOOO0o0 )
 O0o0Oo . setProperty ( 'trakt_id' , str ( I11i1II ) )
 IiOOo00 = transistortv_utils . make_info ( show , people = I11Ii )
 if 74 - 74: iiI1i1 * oO0o - I11iIi1I % iIii1I11I1II1
 if 56 - 56: I11iIi1I - O0
 if oO0OOOO0o0 and getattr ( O0o0Oo , 'setCast' , None ) is None :
  IiOOo00 [ 'castandrole' ] = IiOOo00 [ 'cast' ] = [ ( o0o0oo0 [ 'name' ] , o0o0oo0 [ 'role' ] ) for o0o0oo0 in oO0OOOO0o0 ]
  if 25 - 25: i1 * IiiIII111iI % i11iIiiIii + i11iIiiIii * i1
 if 'TotalEpisodes' in IiOOo00 :
  O0o0Oo . setProperty ( 'TotalEpisodes' , str ( IiOOo00 [ 'TotalEpisodes' ] ) )
  O0o0Oo . setProperty ( 'WatchedEpisodes' , str ( IiOOo00 [ 'WatchedEpisodes' ] ) )
  O0o0Oo . setProperty ( 'UnWatchedEpisodes' , str ( IiOOo00 [ 'UnWatchedEpisodes' ] ) )
  if 42 - 42: i11i / O0 . iIii1I11I1II1 / O0 / i1 / OoooooooOO
 if section_params [ 'section' ] == SECTIONS . TV :
  ii1I = { 'mode' : section_params [ 'next_mode' ] , 'trakt_id' : I11i1II , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'tvdb_id' : show [ 'ids' ] [ 'tvdb' ] }
  IiOOo00 [ 'TVShowTitle' ] = IiOOo00 [ 'title' ]
 else :
  ii1I = { 'mode' : section_params [ 'next_mode' ] , 'video_type' : section_params [ 'video_type' ] , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : I11i1II }
 ii1I [ 'random' ] = time . time ( )
 if 62 - 62: O0 . o0
 O0o0Oo . setInfo ( 'video' , IiOOo00 )
 Oo00OOOOO = kodi . get_plugin_url ( ii1I )
 if 33 - 33: o0 / iIii1I11I1II1 % i1IIi
 ii1I = { 'video_type' : section_params [ 'video_type' ] , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : I11i1II }
 if section_params [ 'next_mode' ] == MODES . GET_SOURCES :
  if kodi . get_setting ( 'auto-play' ) == 'true' :
   ii1I [ 'mode' ] = MODES . SELECT_SOURCE
   iIi1ii1I1 = i18n ( 'select_source' )
   if kodi . get_setting ( 'source-win' ) == 'Dialog' :
    OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
   else :
    OooO0 = 'Container.Update(%s)' % kodi . get_plugin_url ( ii1I )
  else :
   ii1I [ 'mode' ] = MODES . AUTOPLAY
   OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
   iIi1ii1I1 = i18n ( 'auto-play' )
  menu_items . insert ( 0 , ( iIi1ii1I1 , OooO0 ) , )
  if 76 - 76: oO0o + iIii1I11I1II1 + ii1IiI1i . i1
 if section_params [ 'next_mode' ] == MODES . GET_SOURCES and kodi . get_setting ( 'show_download' ) == 'true' :
  ii1I = { 'mode' : MODES . DOWNLOAD_SOURCE , 'video_type' : section_params [ 'video_type' ] , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : I11i1II }
  if kodi . get_setting ( 'source-win' ) == 'Dialog' :
   OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
  else :
   OooO0 = 'Container.Update(%s)' % kodi . get_plugin_url ( ii1I )
  menu_items . append ( ( i18n ( 'download_source' ) , OooO0 ) , )
  if 49 - 49: o00ooo0 / Oo0oO0ooo / Ii11111i
 if iI1 :
  I1ii1ii1I = utils2 . show_id ( show )
  if show . get ( 'in_collection' , False ) :
   ii1I = { 'mode' : MODES . REM_FROM_COLL , 'section' : section_params [ 'section' ] }
   ii1I . update ( I1ii1ii1I )
   menu_items . append ( ( i18n ( 'remove_from_collection' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  else :
   ii1I = { 'mode' : MODES . ADD_TO_COLL , 'section' : section_params [ 'section' ] }
   ii1I . update ( I1ii1ii1I )
   menu_items . append ( ( i18n ( 'add_to_collection' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
   if 25 - 25: oOooOoO0Oo0O % O0 + i1IIi - Oo0oO0ooo
  ii1I = { 'mode' : MODES . ADD_TO_LIST , 'section' : section_params [ 'section' ] }
  ii1I . update ( I1ii1ii1I )
  menu_items . append ( ( i18n ( 'add_to_list' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 38 - 38: OOooOOo % o00 + i11iIiiIii + II1i + Oo0oO0ooo / i11iIiiIii
  ii1I = { 'mode' : MODES . RATE , 'section' : section_params [ 'section' ] }
  if 94 - 94: II1i - o0 + IiiIII111iI
  if show [ 'ids' ] . get ( 'imdb' ) :
   ii1I . update ( { 'id_type' : 'imdb' , 'show_id' : show [ 'ids' ] [ 'imdb' ] } )
  else :
   ii1I . update ( I1ii1ii1I )
  menu_items . append ( ( i18n ( 'rate_on_trakt' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 59 - 59: iiI1i1 . oOooOoO0Oo0O - iIii1I11I1II1 + iIii1I11I1II1
 ii1I = { 'mode' : MODES . ADD_TO_LIBRARY , 'video_type' : section_params [ 'video_type' ] , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : I11i1II }
 menu_items . append ( ( i18n ( 'add_to_library' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . REFRESH_IMAGES , 'video_type' : section_params [ 'video_type' ] , 'ids' : json . dumps ( show [ 'ids' ] ) }
 menu_items . append ( ( i18n ( 'refresh_images' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if 56 - 56: IiiIII111iI + Oo0oO0ooo
 if iI1 :
  if show . get ( 'watched' , False ) :
   I11i1I1ii1i1 = False
   iIi1ii1I1 = i18n ( 'mark_as_unwatched' )
  else :
   I11i1I1ii1i1 = True
   iIi1ii1I1 = i18n ( 'mark_as_watched' )
   if 32 - 32: i11i + ii1IiI1i % Oo0oO0ooo / ii1IiI1i + I11iIi1I
  if I11i1I1ii1i1 or section_params [ 'section' ] == SECTIONS . MOVIES :
   ii1I = { 'mode' : MODES . TOGGLE_WATCHED , 'section' : section_params [ 'section' ] , 'watched' : I11i1I1ii1i1 }
   ii1I . update ( I1ii1ii1I )
   menu_items . append ( ( iIi1ii1I1 , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
   if 2 - 2: i11iIiiIii - o00 + i1 % iiI1i1 * oO0o
 if section_params [ 'section' ] == SECTIONS . TV and kodi . get_setting ( 'enable-subtitles' ) == 'true' :
  ii1I = { 'mode' : MODES . EDIT_TVSHOW_ID , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] }
  OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
  menu_items . append ( ( i18n ( 'set_addicted_tvshowid' ) , OooO0 , ) )
  if 54 - 54: O0 - II1i . Ii11111i % II1i + II1i
 if section_params [ 'section' ] == SECTIONS . TV :
  if str ( I11i1II ) in utils2 . get_progress_skip_list ( ) :
   ii1I = { 'mode' : MODES . MANAGE_PROGRESS , 'action' : ACTIONS . REMOVE , 'trakt_id' : I11i1II }
   OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
   menu_items . append ( ( i18n ( 'include_in_mne' ) , OooO0 , ) )
  else :
   if str ( I11i1II ) in utils2 . get_force_title_list ( ) :
    iIi1ii1I1 = i18n ( 'use_def_ep_matching' )
   else :
    iIi1ii1I1 = i18n ( 'use_ep_title_match' )
   ii1I = { 'mode' : MODES . TOGGLE_TITLE , 'trakt_id' : I11i1II }
   OooO0 = 'RunPlugin(%s)' % kodi . get_plugin_url ( ii1I )
   menu_items . append ( ( iIi1ii1I1 , OooO0 , ) )
   if 36 - 36: Ii11111i % i11iIiiIii
 ii1I = { 'mode' : MODES . SET_URL_SEARCH , 'video_type' : section_params [ 'video_type' ] , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : I11i1II }
 menu_items . append ( ( i18n ( 'set_rel_url_search' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 ii1I = { 'mode' : MODES . SET_URL_MANUAL , 'video_type' : section_params [ 'video_type' ] , 'title' : show [ 'title' ] , 'year' : show [ 'year' ] , 'trakt_id' : I11i1II }
 menu_items . append ( ( i18n ( 'set_rel_url_manual' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
 if 47 - 47: i1IIi + i11i . o0 * IiiIII111iI . iiI1i1 / i1IIi
 if len ( menu_items ) < 10 and 'trailer' in IiOOo00 :
  ii1I = { 'mode' : MODES . PLAY_TRAILER , 'stream_url' : IiOOo00 [ 'trailer' ] }
  menu_items . insert ( - 3 , ( i18n ( 'play_trailer' ) , 'RunPlugin(%s)' % ( kodi . get_plugin_url ( ii1I ) ) ) , )
  if 50 - 50: o00 / i1IIi % OoooooooOO
 O0o0Oo . addContextMenuItems ( menu_items , replaceItems = True )
 if 83 - 83: I11iIi1I * I11iIi1I + Ii11111i
 O0o0Oo . setProperty ( 'resumetime' , str ( 0 ) )
 O0o0Oo . setProperty ( 'totaltime' , str ( 1 ) )
 return O0o0Oo , Oo00OOOOO
 if 57 - 57: O0 - O0 . I11iIi1I / OOooOOo / oO0o
def O0i1II1Iiii1I11 ( section , slug , username = None , cached = True ) :
 if slug == utils . WATCHLIST_SLUG :
  IiI111111IIII = Oo . show_watchlist ( section , cached = cached )
 else :
  try :
   IiI111111IIII = Oo . show_list ( slug , section , username , auth = bool ( iI1 ) , cached = cached )
  except TraktNotFoundError :
   IiIIiIIIiIii = i18n ( 'list_not_exist' ) % ( slug )
   kodi . notify ( msg = IiIIiIIIiIii , duration = 5000 )
   o0OO00 . log ( IiIIiIIIiIii , log_utils . LOGWARNING )
   return
   if 20 - 20: Ii11111i * i11i - ii1IiI1i - IiiIII111iI * o00
 return IiI111111IIII
 if 6 - 6: Oo0oO0ooo + Ii11111i / o0 + o00ooo0 % i11i / i1
def iiIi ( argv = None ) :
 if sys . argv : argv = sys . argv
 ii1I = kodi . parse_query ( sys . argv [ 2 ] )
 o0OO00 . log ( 'Version: |%s| Queries: |%s|' % ( kodi . get_version ( ) , ii1I ) , log_utils . LOGNOTICE )
 o0OO00 . log ( 'Args: |%s|' % ( argv ) , log_utils . LOGNOTICE )
 if 74 - 74: O0 + OoooooooOO / IiiIII111iI / ii1IiI1i . I11iIi1I % IiiIII111iI
 if 34 - 34: i1IIi . oOooOoO0Oo0O
 oO0Ooo0ooOO0 = 'plugin://%s/' % ( kodi . get_id ( ) )
 if argv [ 0 ] != oO0Ooo0ooOO0 :
  return
  if 6 - 6: o00 % IiiIII111iI % oO0o
 try :
  global db_connection
  db_connection = DB_Connection ( )
  iii = ii1I . get ( 'mode' , None )
  IiII . dispatch ( iii , ii1I )
 except ( TransientTraktError , TraktError , TraktAuthError ) as OoO0O00O0oo0O :
  o0OO00 . log ( str ( OoO0O00O0oo0O ) , log_utils . LOGERROR )
  kodi . notify ( msg = str ( OoO0O00O0oo0O ) , duration = 5000 )
 except DatabaseRecoveryError as OoO0O00O0oo0O :
  o0OO00 . log ( 'Attempting DB recovery due to Database Error: %s' % ( OoO0O00O0oo0O ) , log_utils . LOGWARNING )
  db_connection . attempt_db_recovery ( )
  if 63 - 63: O0 . oOooOoO0Oo0O . O0 * iIii1I11I1II1
if __name__ == '__main__' :
 sys . exit ( iiIi ( ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')
