import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import __builtin__
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
if 73 - 73: II111iiii
if 22 - 22: I1IiiI * Oo0Ooo / OoO0O00 . OoOoOO00 . o0oOOo0O0Ooo / I1ii11iIi11i
if 48 - 48: oO0o / OOooOOo / I11i / Ii1I
if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * Ii1I
if 46 - 46: ooOoO0o * I11i - OoooooooOO
if 30 - 30: o0oOOo0O0Ooo - O0 % o0oOOo0O0Ooo - OoooooooOO * O0 * OoooooooOO
if 60 - 60: iIii1I11I1II1 / i1IIi * oO0o - I1ii11iIi11i + o0oOOo0O0Ooo
if 94 - 94: i1IIi % Oo0Ooo
if 68 - 68: Ii1I / O0
if 46 - 46: O0 * II111iiii / IiII * Oo0Ooo * iII111i . I11i
if 62 - 62: i11iIiiIii - II111iiii % I1Ii111 - iIii1I11I1II1 . I1ii11iIi11i . II111iiii
if 61 - 61: oO0o / OoOoOO00 / iII111i * OoO0O00 . II111iiii
if 1 - 1: II111iiii - I1ii11iIi11i % i11iIiiIii + IiII . I1Ii111
if 55 - 55: iIii1I11I1II1 - I1IiiI . Ii1I * IiII * i1IIi / iIii1I11I1II1
if 79 - 79: oO0o + I1Ii111 . ooOoO0o * IiII % I11i . I1IiiI
if 94 - 94: iII111i * Ii1I / IiII . i1IIi * iII111i
if 47 - 47: i1IIi % i11iIiiIii
import base64
import __builtin__
i1iII1I1i1i1 = base64 . b64decode ( b"aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzloZlB4dHZw" )
__builtin__ . tvdb_api_key = base64 . b64decode ( b"QTA1RjhGNDgxMDgyMjU3Mg==" )
__builtin__ . tmdb_api_key = base64 . b64decode ( b"MTAwODU4MGY0ODliNzZhYmRlNGQyNzM1ZmE1NTZhMzY=" )
__builtin__ . trakt_client_id = base64 . b64decode ( b"MzEzN2EwYjExYjllMzQzY2MwNzk4ZWE4ZjkyYzVkMGI5NDJiNjlhMzA3NmYwNWE5NTgwNWMzZTkwOGNkYmY1Nw==" )
__builtin__ . trakt_client_secret = base64 . b64decode ( b"MjI4YWRjZTQxNjI1OThhMjVmZWFiYmZmZDJjMTE4YjFiYjQxMjViMDFkYWI2NzU4ZjdmOTdmYjJiYmFjMjYyMA==" )
__builtin__ . search_db_location = ""
if 27 - 27: OoO0O00
import os
import sys
if 73 - 73: o0oOOo0O0Ooo - Oo0Ooo
import koding
import koding . router as router
from resources . lib . installa import Dialog_specific
from resources . lib . news_window import Dialog_Example
import resources . lib . search
import resources . lib . sources
import resources . lib . testings
import resources . lib . util . info
import xbmc
import xbmcaddon
import xbmcplugin
from koding import route
from resources . lib . util . xml import JenList , display_list
import resources . lib . util . views
from resources . lib . plugins import *
from language import get_string as _
from resources . lib . plugin import run_hook
if 58 - 58: i11iIiiIii % I1Ii111
if 54 - 54: OOooOOo % O0 + I1IiiI - iII111i / I11i
iIiiI1 = xbmcaddon . Addon ( ) . getAddonInfo ( 'id' )
OoOooOOOO = xbmcaddon . Addon ( ) . getAddonInfo ( 'name' )
i11iiII = xbmc . translatePath ( 'special://home/' )
I1iiiiI1iII = os . path . join ( i11iiII , 'addons' )
IiIi11i = os . path . join ( I1iiiiI1iII , iIiiI1 )
iIii1I111I11I = "files"
OO00OooO0OO = xbmcaddon . Addon ( id = iIiiI1 )
iiiIi = OO00OooO0OO . getSetting ( 'dlimage' )
IiIIIiI1I1 = OO00OooO0OO . getSetting ( 'news_win' )
if 86 - 86: i11iIiiIii + Ii1I + ooOoO0o * I11i + o0oOOo0O0Ooo
@ route ( "main" )
def oOoO ( ) :
 if IiIIIiI1I1 == 'true' :
  if 68 - 68: OoOoOO00 . oO0o . i11iIiiIii
  koding . Add_Dir ( name = '[COLOR yellow]Latest Add-On News[/COLOR]' , url = '{"my_text":"Latest News[CR]!!!","my_desc":""}' , mode = 'dialog_example' , folder = False , icon = os . path . join ( IiIi11i , 'icon.png' ) , fanart = os . path . join ( IiIi11i , 'fanart.jpg' ) )
 if not II ( i1iII1I1i1i1 ) :
  koding . Add_Dir (
 name = _ ( "Message" ) ,
 url = _ ( "Sorry, server is down" ) ,
 mode = "message" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Search" ) ,
 url = "" ,
 mode = "Search" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Testings" ) ,
 url = '{"file_name":"testings.xml"}' ,
 mode = "Testings" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
 if iiiIi == 'true' :
  koding . Add_Dir ( name = 'Download Backgrounds' , url = '{"my_text":"INSTALLA[CR]!!!","my_desc":""}' , mode = 'dialog_specific' , folder = False , icon = os . path . join ( IiIi11i , 'icon.png' ) , fanart = os . path . join ( IiIi11i , 'fanart.jpg' ) )
  if 14 - 14: Oo0Ooo . I1IiiI / Ii1I
  if 38 - 38: II111iiii % i11iIiiIii . ooOoO0o - OOooOOo + Ii1I
@ route ( mode = 'get_list_uncached' , args = [ "url" ] )
def Ooooo0Oo00oO0 ( url ) :
 global iIii1I111I11I
 if 12 - 12: iIii1I11I1II1 * I1IiiI . ooOoO0o % I11i + O0
 O00 = JenList ( url , cached = False )
 if not O00 :
  koding . dolog ( _ ( "returned empty for " ) + url )
 o0OOOOO00o0O0 = O00 . get_list ( )
 o0o0OOO0o0 = O00 . get_content_type ( )
 if o0OOOOO00o0O0 == [ ] :
  return False
 if o0o0OOO0o0 :
  iIii1I111I11I = o0o0OOO0o0
 display_list ( o0OOOOO00o0O0 , iIii1I111I11I )
 return True
 if 84 - 84: IiII
 if 25 - 25: Oo0Ooo - IiII . OoooooooOO
@ route ( mode = "get_list" , args = [ "url" ] )
def II ( url ) :
 global iIii1I111I11I
 if 22 - 22: IiII + II111iiii % I1Ii111 . I11i . OoOoOO00
 O00 = JenList ( url )
 if not O00 :
  koding . dolog ( _ ( "returned empty for " ) + url )
 o0OOOOO00o0O0 = O00 . get_list ( )
 o0o0OOO0o0 = O00 . get_content_type ( )
 if o0OOOOO00o0O0 == [ ] :
  return False
 if o0o0OOO0o0 :
  iIii1I111I11I = o0o0OOO0o0
 display_list ( o0OOOOO00o0O0 , iIii1I111I11I )
 return True
 if 76 - 76: OoOoOO00 - O0 % OOooOOo / I1ii11iIi11i / OoOoOO00
 if 54 - 54: I1IiiI % II111iiii % II111iiii
@ route ( mode = "all_episodes" , args = [ "url" ] )
def iI1 ( url ) :
 global iIii1I111I11I
 import pickle
 import xbmcgui
 i11Iiii = pickle . loads ( url )
 iI = [ ]
 I1i1I1II = xbmcgui . DialogProgress ( )
 I1i1I1II . create ( OoOooOOOO , _ ( "Loading items" ) )
 i1 = len ( i11Iiii )
 for IiIiiI , I1I in enumerate ( i11Iiii ) :
  if I1i1I1II . iscanceled ( ) :
   break
  oOO00oOO = ( ( IiIiiI + 1 ) * 100 ) / i1
  I1i1I1II . update ( oOO00oOO , _ ( "processing lists" ) , _ ( "%s of %s" ) % (
 IiIiiI + 1 ,
 i1 ) )
  if 75 - 75: i1IIi / OoooooooOO - O0 / OoOoOO00 . II111iiii - i1IIi
  O00 = JenList ( I1I )
  iI . extend ( O00 . get_list ( skip_dialog = True ) )
 iIii1I111I11I = "episodes"
 display_list ( iI , "episodes" )
 if 71 - 71: OOooOOo + Ii1I * OOooOOo - OoO0O00 * o0oOOo0O0Ooo
 if 65 - 65: O0 % I1IiiI . I1ii11iIi11i % iIii1I11I1II1 / OOooOOo % I1Ii111
@ route ( mode = "Settings" )
def oo ( ) :
 xbmcaddon . Addon ( ) . openSettings ( )
 if 44 - 44: O0 / ooOoO0o
 if 84 - 84: ooOoO0o * II111iiii % Ii1I . OoOoOO00
@ route ( mode = "ScraperSettings" )
def OOOO ( ) :
 xbmcaddon . Addon ( 'script.module.universalscrapers' ) . openSettings ( )
 if 10 - 10: OOooOOo / I1IiiI * OOooOOo
 if 29 - 29: I1ii11iIi11i % I1IiiI + ooOoO0o / o0oOOo0O0Ooo + OOooOOo * o0oOOo0O0Ooo
@ route ( mode = "ResolverSettings" )
def i1I1iI ( ) :
 xbmcaddon . Addon ( 'script.module.resolveurl' ) . openSettings ( )
 if 93 - 93: iIii1I11I1II1 % oO0o * i1IIi
 if 16 - 16: O0 - I1Ii111 * iIii1I11I1II1 + iII111i
@ route ( mode = "ClearTraktAccount" )
def Ii11iII1 ( ) :
 import xbmcgui
 if xbmcgui . Dialog ( ) . yesno ( OoOooOOOO , "{0} Trakt {1}. {2}" . format ( _ ( "Delete" ) , _ ( "Settings" ) . lower ( ) , _ ( "Are you sure?" ) ) ) :
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_EXPIRES_AT" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_ACCESS_TOKEN" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_REFRESH_TOKEN" , "" )
  if 51 - 51: II111iiii * OoO0O00 % o0oOOo0O0Ooo * II111iiii % I1ii11iIi11i / ooOoO0o
  if 49 - 49: o0oOOo0O0Ooo
@ route ( mode = "message" , args = [ "url" ] )
def IIii1Ii1 ( message ) :
 import xbmcgui
 if len ( message ) > 80 :
  koding . Text_Box ( OoOooOOOO , message )
 else :
  xbmcgui . Dialog ( ) . ok ( OoOooOOOO , message )
  if 5 - 5: iII111i % OOooOOo + ooOoO0o % i11iIiiIii + o0oOOo0O0Ooo
  if 60 - 60: OoO0O00 * OoOoOO00 - OoO0O00 % OoooooooOO - ooOoO0o + I1IiiI
@ route ( 'clearCache' )
def O00Oo000ooO0 ( ) :
 import xbmcgui
 I1i1I1II = xbmcgui . Dialog ( )
 if I1i1I1II . yesno ( OoOooOOOO , _ ( "Clear Metadata?" ) ) :
  koding . Remove_Table ( "meta" )
  koding . Remove_Table ( "episode_meta" )
 if I1i1I1II . yesno ( OoOooOOOO , _ ( "Clear Scraper Cache?" ) ) :
  import universalscrapers
  universalscrapers . clear_cache ( )
 if I1i1I1II . yesno ( OoOooOOOO , _ ( "Clear GIF Cache?" ) ) :
  OoO0O00IIiII = os . path . join (
 xbmc . translatePath ( xbmcaddon . Addon ( ) . getSetting ( "cache_folder" ) ) ,
 "artcache" )
  koding . Delete_Folders ( OoO0O00IIiII )
 xbmc . log ( "running hook:" , xbmc . LOGNOTICE )
 run_hook ( "clear_cache" )
 if 80 - 80: IiII . oO0o
 if 25 - 25: OoOoOO00 . II111iiii / iII111i . OOooOOo * OoO0O00 . I1IiiI
def Oo0oOOo ( mode , url = "" ) :
 import urllib
 Oo0OoO00oOO0o = sys . argv [ 0 ] + "?mode=%s" % mode
 if 80 - 80: oO0o + OOooOOo - OOooOOo % iII111i
 if url :
  Oo0OoO00oOO0o += "&url=%s" % urllib . quote_plus ( url )
 return Oo0OoO00oOO0o
 if 63 - 63: I1IiiI - I1ii11iIi11i + O0 % I11i / iIii1I11I1II1 / o0oOOo0O0Ooo
 if 98 - 98: iII111i * iII111i / iII111i + I11i
def ii111111I1iII ( ) :
 Oo0OoO00oOO0o = run_hook ( "first_run_wizard" )
 if Oo0OoO00oOO0o :
  return
  if 68 - 68: iII111i - iIii1I11I1II1 * i11iIiiIii / I1ii11iIi11i * I1Ii111
  if 23 - 23: iII111i
  if 91 - 91: iIii1I11I1II1 + I1Ii111
if xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 ii111111I1iII ( )
 if 31 - 31: IiII . OoOoOO00 . OOooOOo
O0oOoOO = xbmc . getInfoLabel ( "Container.FolderName" )
if O0oOoOO in [ "" , "plugin.program.super.favourites" ] :
 __builtin__ . JEN_WIDGET = True
else :
 __builtin__ . JEN_WIDGET = False
 if 96 - 96: Oo0Ooo
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_NONE )
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
if 45 - 45: O0 * o0oOOo0O0Ooo % Oo0Ooo * OoooooooOO + iII111i . OoOoOO00
router . Run ( )
if 67 - 67: i11iIiiIii - i1IIi % I1ii11iIi11i . O0
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) , cacheToDisc = False )
try :
 iIii1I111I11I = __builtin__ . content_type
except :
 pass
if not xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 if iIii1I111I11I == "files" :
  iIii1I111I11I = "other"
 resources . lib . util . views . set_list_view_mode ( iIii1I111I11I )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')